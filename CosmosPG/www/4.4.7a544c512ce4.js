(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[4],{

/***/ "./src/js/modules/chart/highcharts/trading-editor/editor.js":
/*!******************************************************************!*\
  !*** ./src/js/modules/chart/highcharts/trading-editor/editor.js ***!
  \******************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\n    var server = __webpack_require__(/*! server */ \"./src/js/modules/server/server.request.js\");\n    var conversionRateSubscription = __webpack_require__(/*! modules/subscription/conversion.rate.subscription */ \"./src/js/modules/subscription/conversion.rate.subscription.js\");\n    var stream = __webpack_require__(/*! modules/stream/stream */ \"./src/js/modules/stream/stream.js\");\n    var user = __webpack_require__(/*! modules/user/user.model */ \"./src/js/modules/user/user.model.js\");\n    var EditPositionModel = __webpack_require__(/*! modules/open-positions/edit.position.model */ \"./src/js/modules/open-positions/edit.position.model.js\");\n    var EditOrderModel = __webpack_require__(/*! modules/orders/edit.order.model */ \"./src/js/modules/orders/edit.order.model.js\");\n\n    var TAKE_PROFIT = 'takeProfit';\n    var STOP_LOSS = 'stopLoss';\n\n    var Editor = function () {\n        function Editor() {\n            _classCallCheck(this, Editor);\n        }\n\n        _createClass(Editor, null, [{\n            key: 'initEditing',\n            value: function initEditing(handler, model, subscribeToConversion, _ref) {\n                var onChangeProfitForTakeProfit = _ref.onChangeProfitForTakeProfit,\n                    onChangeLossForStopLoss = _ref.onChangeLossForStopLoss,\n                    onChangeRate = _ref.onChangeRate,\n                    onChangeConversionRate = _ref.onChangeConversionRate;\n\n                onChangeConversionRate && handler.listenTo(model, 'change:conversionRate', onChangeConversionRate);\n                onChangeRate && handler.listenTo(model, 'change:rate', onChangeRate);\n                onChangeProfitForTakeProfit && handler.listenTo(model, 'change:profitForTakeProfit', onChangeProfitForTakeProfit);\n                onChangeLossForStopLoss && handler.listenTo(model, 'change:lossForStopLoss', onChangeLossForStopLoss);\n\n                subscribeToConversion && Editor.sendSubscribeToConversion(model.getInstrument().getCurrency(), user.getUserCurrency());\n            }\n        }, {\n            key: 'createEditPositionModel',\n            value: function createEditPositionModel(position, instrument) {\n                var type = position.get('quantity') < 0 ? 'Sell' : 'Buy';\n\n                return new EditPositionModel({\n                    instrumentModel: instrument,\n                    type: type,\n                    direction: type,\n                    position: position\n                });\n            }\n        }, {\n            key: 'stopEditing',\n            value: function stopEditing(handler, model, unsubscribeFromConversion) {\n                handler.stopListening(model);\n                unsubscribeFromConversion && Editor.sendUnsubscribeFromConversion(model.getInstrument().getCurrency(), user.getUserCurrency());\n            }\n        }, {\n            key: 'sendSubscribeToConversion',\n            value: function sendSubscribeToConversion(from, to) {\n                return conversionRateSubscription.add(from, to).then(Editor.requestConversionSubscriptionSuccess).catch(Editor.requestConversionSubscriptionError);\n            }\n        }, {\n            key: 'sendUnsubscribeFromConversion',\n            value: function sendUnsubscribeFromConversion(from, to) {\n                return conversionRateSubscription.remove(from, to).then(Editor.requestConversionUnsubscriptionSuccess).catch(Editor.requestConversionUnsubscriptionError);\n            }\n        }, {\n            key: 'requestConversionSubscriptionSuccess',\n            value: function requestConversionSubscriptionSuccess(res) {\n                console.log('Subscribe conversion... OK', res);\n\n                return Promise.resolve(res);\n            }\n        }, {\n            key: 'requestConversionSubscriptionError',\n            value: function requestConversionSubscriptionError(res) {\n                console.log('Subscribe conversion... ERROR', res);\n\n                return Promise.reject(res);\n            }\n        }, {\n            key: 'requestConversionUnsubscriptionSuccess',\n            value: function requestConversionUnsubscriptionSuccess(res) {\n                console.log('Unsubscribe conversion... OK', res);\n\n                return Promise.resolve(res);\n            }\n        }, {\n            key: 'requestConversionUnsubscriptionError',\n            value: function requestConversionUnsubscriptionError(res) {\n                console.log('Unsubscribe conversion... ERROR', res);\n\n                return Promise.reject(res);\n            }\n        }, {\n            key: 'removePositionStopLoss',\n            value: function removePositionStopLoss(model) {\n                return Editor.requestEditPosition(model, [TAKE_PROFIT]).then(Editor.onSubmitSuccess).catch(Editor.onSubmitError);\n            }\n        }, {\n            key: 'removePositionTakeProfit',\n            value: function removePositionTakeProfit(model) {\n                return Editor.requestEditPosition(model, [STOP_LOSS]).then(Editor.onSubmitSuccess).catch(Editor.onSubmitError);\n            }\n        }, {\n            key: 'removeOrderStopLoss',\n            value: function removeOrderStopLoss(model) {\n                return Editor.requestPlaceOrder(model, [TAKE_PROFIT]).then(Editor.onSubmitSuccess).catch(Editor.onSubmitError);\n            }\n        }, {\n            key: 'removeOrderTakeProfit',\n            value: function removeOrderTakeProfit(model) {\n                return Editor.requestPlaceOrder(model, [STOP_LOSS]).then(Editor.onSubmitSuccess).catch(Editor.onSubmitError);\n            }\n        }, {\n            key: 'requestEditPosition',\n            value: function requestEditPosition(model, fieldsToSave) {\n                console.log('Edit Position...');\n\n                var editPositionData = [];\n\n                if (fieldsToSave.indexOf(TAKE_PROFIT) >= 0 && model.getPositionModel().get(TAKE_PROFIT)) {\n                    var takeProfit = {\n                        fixedOffset: model.minOrderDistance(),\n                        fixedPrice: model.getTakeProfit(),\n                        isPriceFixed: true,\n                        orderType: 'LIMIT',\n                        requestId: null\n                    };\n\n                    editPositionData.push(takeProfit);\n                }\n\n                if (fieldsToSave.indexOf(STOP_LOSS) >= 0 && model.getPositionModel().get(STOP_LOSS)) {\n                    var stopLoss = {\n                        fixedOffset: model.minOrderDistance(),\n                        fixedPrice: model.getStopLoss(),\n                        isPriceFixed: true,\n                        orderType: 'STOP',\n                        requestId: null\n                    };\n\n                    editPositionData.push(stopLoss);\n                }\n\n                return server.editPosition(stream.getAtmosphereId(), editPositionData, model.getPositionCode());\n            }\n        }, {\n            key: 'onSubmitSuccess',\n            value: function onSubmitSuccess() {\n                console.log('Submit... OK');\n\n                return Promise.resolve();\n            }\n        }, {\n            key: 'onSubmitError',\n            value: function onSubmitError() {\n                console.log('Submit... ERROR');\n\n                return Promise.reject(res);\n            }\n\n            /*-----------------*/\n\n            // same as in events.bus but with instrument in arguments\n\n        }, {\n            key: 'getOrderAttributes',\n            value: function getOrderAttributes(order, instrument) {\n                var quantity = order.get('quantity');\n                var action = quantity > 0 ? 'buy' : 'sell';\n                var type = order.get('type');\n                var price = null;\n                var orderPosition = null;\n                var takeProfit = order.get(TAKE_PROFIT);\n                var stopLoss = order.get(STOP_LOSS);\n\n                switch (type) {\n                    case 'STOP':\n                        type = 'Entry Stop';\n                        orderPosition = action === 'buy' ? 'above' : 'below';\n                        price = order.get('stopPrice');\n                        break;\n                    case 'LIMIT':\n                        type = 'Entry Limit';\n                        orderPosition = action === 'buy' ? 'below' : 'above';\n                        price = order.get('limitPrice');\n                        break;\n                }\n\n                return {\n                    instrument: instrument,\n                    order: order,\n                    action: action,\n                    quantity: Math.abs(quantity),\n                    type: type,\n                    orderPosition: orderPosition,\n                    price: price,\n                    takeProfit: takeProfit && takeProfit.fixedPrice,\n                    stopLoss: stopLoss && stopLoss.fixedPrice\n                };\n            }\n        }, {\n            key: 'createEditOrderModel',\n            value: function createEditOrderModel(order, instrument) {\n                var attributes = Editor.getOrderAttributes(order, instrument);\n\n                return new EditOrderModel({\n                    instrumentModel: attributes.instrument,\n                    type: attributes.action,\n                    direction: attributes.action.toUpperCase(),\n                    order: attributes.order,\n                    takeProfit: attributes.takeProfit,\n                    stopLoss: attributes.stopLoss\n                });\n            }\n        }, {\n            key: 'requestPlaceOrder',\n            value: function requestPlaceOrder(model, fieldsToSave) {\n                console.log('Place order...');\n\n                var editOrderData = {\n                    effect: 'OPENING',\n                    instrumentId: model.getInstrumentModel().getId(),\n                    orderSide: model.getDirection(),\n                    orderType: model.order.getType(),\n                    // quantity: model.isSell() ? -(model.getAmount()) : model.getAmount(),\n                    quantity: model.getAmount(),\n                    refOrderChainId: model.order.getOrderChainId(),\n                    requestId: _.uniqueId('gwt-uid-'),\n                    timeInForce: 'GTC'\n                };\n\n                if (model.order.isLimitPrice()) {\n                    editOrderData.limitPrice = model.getCurrentPrice();\n                    editOrderData.stopPrice = null;\n                } else {\n                    editOrderData.limitPrice = null;\n                    editOrderData.stopPrice = model.getCurrentPrice();\n                }\n\n                if (fieldsToSave.indexOf(STOP_LOSS) >= 0 && model.order.get(STOP_LOSS)) {\n                    editOrderData.stopLoss = {\n                        fixedOffset: model.minOrderDistance(false),\n                        fixedPrice: model.getStopLoss(),\n                        isPriceFixed: true,\n                        orderType: 'STOP'\n                    };\n                }\n\n                if (fieldsToSave.indexOf(TAKE_PROFIT) >= 0 && model.order.get(TAKE_PROFIT)) {\n                    editOrderData.takeProfit = {\n                        fixedOffset: model.minOrderDistance(false),\n                        fixedPrice: model.getTakeProfit(),\n                        isPriceFixed: true,\n                        orderType: 'LIMIT'\n                    };\n                }\n\n                // dirty hack for revert rate after order's reject\n                model.order.unset('modifiedTime', { silent: true });\n\n                return server.placeOrder(stream.getAtmosphereId(), editOrderData);\n            }\n        }, {\n            key: 'updatePositionTakeProfit',\n            value: function updatePositionTakeProfit(model) {\n                return Editor.updatePosition(model);\n            }\n        }, {\n            key: 'updatePositionStopLoss',\n            value: function updatePositionStopLoss(model) {\n                return Editor.updatePosition(model);\n            }\n        }, {\n            key: 'updatePosition',\n            value: function updatePosition(model) {\n                return Editor.requestEditPosition(model, [TAKE_PROFIT, STOP_LOSS]).then(Editor.onSubmitSuccess).catch(Editor.onSubmitError);\n            }\n        }, {\n            key: 'updateOrderTakeProfit',\n            value: function updateOrderTakeProfit(model) {\n                return Editor.updateOrder(model);\n            }\n        }, {\n            key: 'updateOrderStopLoss',\n            value: function updateOrderStopLoss(model) {\n                return Editor.updateOrder(model);\n            }\n        }, {\n            key: 'updateOrder',\n            value: function updateOrder(model) {\n                return Editor.requestPlaceOrder(model, [TAKE_PROFIT, STOP_LOSS]).then(Editor.onSubmitSuccess).catch(Editor.onSubmitError);\n            }\n        }]);\n\n        return Editor;\n    }();\n\n    module.exports = Editor;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\")))\n\n//# sourceURL=webpack:///./src/js/modules/chart/highcharts/trading-editor/editor.js?");

/***/ })

}]);