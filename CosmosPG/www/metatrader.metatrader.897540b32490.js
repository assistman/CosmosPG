(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["metatrader"],{

/***/ "./src/js/modules/metatrader/index.js":
/*!********************************************!*\
  !*** ./src/js/modules/metatrader/index.js ***!
  \********************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var MetatraderPopupView = __webpack_require__(/*! ./metatrader.popup.view */ \"./src/js/modules/metatrader/metatrader.popup.view.js\");\n    var MetatraderPopupModel = __webpack_require__(/*! ./metatrader.popup.model */ \"./src/js/modules/metatrader/metatrader.popup.model.js\");\n\n    module.exports = {\n        MetatraderPopupModel: MetatraderPopupModel,\n        MetatraderPopupView: MetatraderPopupView\n    };\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack:///./src/js/modules/metatrader/index.js?");

/***/ }),

/***/ "./src/js/modules/metatrader/metatrader.popup.model.js":
/*!*************************************************************!*\
  !*** ./src/js/modules/metatrader/metatrader.popup.model.js ***!
  \*************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\n    var BaseModel = __webpack_require__(/*! ./base.model */ \"./src/js/modules/metatrader/base.model.js\");\n    var MTAccountsView = __webpack_require__(/*! modules/metatrader/tabs/metatrader.accounts.view */ \"./src/js/modules/metatrader/tabs/metatrader.accounts.view.js\");\n    var MTFundsTransferView = __webpack_require__(/*! modules/metatrader/tabs/metatrader.funds-transfer.view */ \"./src/js/modules/metatrader/tabs/metatrader.funds-transfer.view.js\");\n    var MTLeverageView = __webpack_require__(/*! modules/metatrader/tabs/metatrader.leverage.view */ \"./src/js/modules/metatrader/tabs/metatrader.leverage.view.js\");\n    var MTAddAccountView = __webpack_require__(/*! modules/metatrader/tabs/metatrader.add-account.view */ \"./src/js/modules/metatrader/tabs/metatrader.add-account.view.js\");\n    var MTDepositView = __webpack_require__(/*! modules/metatrader/tabs/metatrader.deposit.view */ \"./src/js/modules/metatrader/tabs/metatrader.deposit.view.js\");\n    var MTBonusesView = __webpack_require__(/*! modules/metatrader/tabs/metatrader.bonuses.view */ \"./src/js/modules/metatrader/tabs/metatrader.bonuses.view.js\");\n    var server = __webpack_require__(/*! server */ \"./src/js/modules/server/server.request.js\");\n    var common = __webpack_require__(/*! modules/external-auth/common */ \"./src/js/modules/external-auth/common.js\");\n\n    var _require = __webpack_require__(/*! common.types */ \"./src/js/common.types.js\"),\n        SUCCESS = _require.SUCCESS,\n        ERROR = _require.ERROR,\n        LOADING = _require.LOADING;\n\n    module.exports = BaseModel.extend({\n        defaults: function defaults() {\n            return {\n                tabs: [{\n                    id: 'metatrader-accounts',\n                    url: 'metatrader-accounts',\n                    title: 'metatrader.accounts.title',\n                    view: MTAccountsView,\n                    hidden: false\n                }, {\n                    id: 'metatrader-funds-transfer',\n                    url: 'metatrader-funds-transfer',\n                    title: 'metatrader.funds-transfer.title',\n                    view: MTFundsTransferView,\n                    hidden: true\n                }, {\n                    id: 'metatrader-leverage',\n                    url: 'metatrader-leverage',\n                    title: 'metatrader.leverage.title',\n                    view: MTLeverageView,\n                    hidden: true\n                }, {\n                    id: 'metatrader-add-account',\n                    url: 'metatrader-add-account',\n                    title: 'metatrader.add-account.title',\n                    view: MTAddAccountView,\n                    hidden: false\n                }, {\n                    id: 'metatrader-deposit',\n                    url: 'metatrader-deposit',\n                    title: 'actions.deposit',\n                    view: MTDepositView,\n                    hidden: false\n                }, {\n                    id: 'metatrader-bonuses',\n                    url: 'metatrader-bonuses',\n                    title: 'metatrader.bonuses.title',\n                    view: MTBonusesView,\n                    hidden: true\n                }],\n                currentTabId: 'metatrader-accounts',\n                defaultTabId: 'metatrader-accounts',\n                resetPassword: false\n            };\n        },\n        initialize: function initialize() {\n            var _this = this;\n\n            BaseModel.prototype.initialize.apply(this, arguments);\n\n            var status = this.status('statusOfMetaTraderTradingCentral');\n\n            status(LOADING);\n\n            return server.getMetaTraderTradingCentral().then(function (res) {\n                if (common.isExternalLoginDetected()) {\n                    _this.set('resetPassword', true);\n                }\n\n                status(SUCCESS, { tradingCentral: res.data });\n            }).catch(function (err) {\n                console.log(err);\n                status(ERROR);\n            });\n        },\n        getCurrentTab: function getCurrentTab() {\n            return _.findWhere(this.get('tabs'), { id: this.getCurrentTabId() });\n        },\n        getCurrentTabId: function getCurrentTabId() {\n            var currentTabId = this.get('currentTabId');\n\n            if (!currentTabId) {\n                currentTabId = this.get('defaultTabId');\n            }\n\n            return currentTabId;\n        },\n        getCurrentTabTitle: function getCurrentTabTitle() {\n            var tab = this.getCurrentTab();\n            var title = null;\n\n            if (tab) {\n                title = tab.title || title;\n            }\n\n            return title;\n        },\n        getCurrentTabView: function getCurrentTabView() {\n            var tab = this.getCurrentTab();\n            var view = null;\n\n            if (tab) {\n                view = tab.view || view;\n            }\n\n            return view;\n        },\n        getTabById: function getTabById(id) {\n            return _.findWhere(this.get('tabs'), { id: id });\n        },\n        setCurrentTabById: function setCurrentTabById(id) {\n            var tab = this.getTabById(id);\n\n            if (tab) {\n                this.set({\n                    currentTabId: tab.id\n                });\n            }\n\n            return tab;\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\")))\n\n//# sourceURL=webpack:///./src/js/modules/metatrader/metatrader.popup.model.js?");

/***/ }),

/***/ "./src/js/modules/metatrader/metatrader.popup.view.js":
/*!************************************************************!*\
  !*** ./src/js/modules/metatrader/metatrader.popup.view.js ***!
  \************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_, $) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\n    var $ = __webpack_require__(/*! jquery */ \"./src/vendors/jbone.js\");\n    var ResponsivePopupView = __webpack_require__(/*! modules/responsive-popup/responsive-popup.view */ \"./src/js/modules/responsive-popup/responsive-popup.view.js\");\n    var core = __webpack_require__(/*! core */ \"./src/js/core.js\");\n    var user = __webpack_require__(/*! modules/user/user.model */ \"./src/js/modules/user/user.model.js\");\n    var settings = __webpack_require__(/*! store/settings */ \"./src/js/store/settings.js\");\n    var MessageBox = __webpack_require__(/*! modules/message-box/message.box.view */ \"./src/js/modules/message-box/message.box.view.js\");\n    var server = __webpack_require__(/*! server */ \"./src/js/modules/server/server.request.js\");\n    var MetatraderLeverageModel = __webpack_require__(/*! modules/metatrader/tabs/metatrader.leverage.model */ \"./src/js/modules/metatrader/tabs/metatrader.leverage.model.js\");\n\n    var template = _.template(__webpack_require__(/*! modules/metatrader/templates/metatrader.popup.html */ \"./src/js/modules/metatrader/templates/metatrader.popup.html\"));\n\n    var _require = __webpack_require__(/*! common.types */ \"./src/js/common.types.js\"),\n        SUCCESS = _require.SUCCESS,\n        ERROR = _require.ERROR,\n        ACTIVE = _require.ACTIVE;\n\n    var MetatraderPopupView = ResponsivePopupView.extend({\n        name: 'metatrader-popup',\n        events: function events() {\n            return _.extend({}, _.result(ResponsivePopupView.prototype, 'events'), {\n                'click .fn-tab': 'changeTab',\n                'click .fn-reset-password': 'resetPassword'\n            });\n        },\n\n        initialize: function initialize(options) {\n            if (options.tabId) {\n                this.model.set('currentTabId', options.tabId);\n            }\n\n            if (options.bonusesTab) {\n                this.model.set('bonusesTab', options.bonusesTab);\n            }\n\n            ResponsivePopupView.prototype.initialize.apply(this, arguments);\n\n            this._metatraderLeverage = new MetatraderLeverageModel();\n\n            this.listenTo(this.model, 'change:statusOfMetaTraderTradingCentral', this.loadCompleted);\n            this.listenTo(this.model, 'change:currentTabId', this.updateTab);\n            this.listenTo(core, 'showMetatraderTabById', this.setTabById);\n            this.listenTo(this._metatraderLeverage, 'change:statusOfMetaTraderAccounts', this.metaTraderAccountsChanged);\n        },\n\n        loadCompleted: function loadCompleted() {\n            var statusOfMetaTraderTradingCentral = this.model.get('statusOfMetaTraderTradingCentral');\n\n            if (statusOfMetaTraderTradingCentral === ERROR) {\n                return this.loadError();\n            }\n\n            if (statusOfMetaTraderTradingCentral !== SUCCESS) {\n                return;\n            }\n\n            this.render();\n            this.updateTab();\n        },\n        loadError: function loadError() {\n            // eslint-disable-next-line no-new\n            new MessageBox({\n                parent: document.body,\n                text: __('server.request.generic.error.body', __('link.contact_us'))\n            });\n\n            this.close();\n        },\n\n\n        render: function render() {\n            ResponsivePopupView.prototype.render.call(this);\n\n            this.setContent(template({\n                tabs: this.model.get('tabs'),\n                currentTabId: this.model.get('currentTabId'),\n                tradingCentral: this.model.get('tradingCentral'),\n                resetPassword: this.model.get('resetPassword'),\n                isMT5PlatformEnabled: settings.isMT5PlatformEnabled(),\n                isConditionsTabEnabled: settings.isMetaTraderConditionsTabEnabled()\n            }));\n\n            return this;\n        },\n\n        updateTab: function updateTab() {\n            var tabView = this.model.getCurrentTabView();\n            var tabId = this.model.getCurrentTabId();\n\n            this.addChildView('.tab-content', tabView, { model: this.model });\n\n            this.$('.header-container-xs .caption').html(__(this.model.getCurrentTabTitle()));\n            this.$('.tab').removeClass('active');\n            this.$('.tab[data-tab-id=' + tabId + ']').addClass('active');\n        },\n\n        changeTab: function changeTab(event) {\n            this.model.setCurrentTabById($(event.currentTarget).attr('data-tab-id'));\n        },\n\n        setTabById: function setTabById(tabId) {\n            this.model.setCurrentTabById(tabId);\n            this._metatraderLeverage.reloadMetaTraderAccounts();\n        },\n\n\n        resetPassword: function resetPassword() {\n            var customerId = user.getCustomerId();\n            var email = user.getEmail();\n\n            return server.forgotPasswordById(customerId).then(function () {\n                var messageBox = new MessageBox({\n                    text: __('mt4.password.need.reset', email),\n                    isHeaderShowed: false,\n                    okBtnText: __('ok'),\n                    isShowCloseForMobile: false\n                });\n            });\n        },\n\n        metaTraderAccountsChanged: function metaTraderAccountsChanged() {\n            this.showLeverageTab();\n            this.showBonusesTab();\n            this.showFundsTransferTab();\n        },\n        showLeverageTab: function showLeverageTab() {\n            var _this = this;\n\n            if (settings.isMetaTraderInternalLeverageEnabled()) {\n                var activeAccounts = _.filter(this._metatraderLeverage.get('metaTraderAccounts'), function (account) {\n                    return _this.model.hasPlatformAccountId(account) && _this.model.isTradingAccountStatus(account, ACTIVE);\n                });\n                var availableLeverages = this._metatraderLeverage.get('availableLeverages');\n                var hasNoVarietyLeverages = _.isEmpty(availableLeverages) || availableLeverages.length === 1 && _.every(activeAccounts, function (acc) {\n                    return acc.leverage === availableLeverages[0];\n                });\n\n                if (_.isEmpty(activeAccounts) || hasNoVarietyLeverages) {\n                    return;\n                }\n\n                this.$el.find('li[data-tab-id=\"metatrader-leverage\"]').removeClass('hidden');\n            }\n        },\n        showBonusesTab: function showBonusesTab() {\n            var _this2 = this;\n\n            if (settings.isBonusesEnabled()) {\n                var accountsWithBonuses = _.filter(this._metatraderLeverage.get('metaTraderAccounts'), function (account) {\n                    return _this2.model.hasPlatformAccountId(account) && _this2.model.isTradingAccountStatus(account, ACTIVE) && account.hasBonuses;\n                });\n\n                if (_.isEmpty(accountsWithBonuses)) {\n                    return;\n                }\n\n                this.$el.find('li[data-tab-id=\"metatrader-bonuses\"]').removeClass('hidden');\n            }\n        },\n        showFundsTransferTab: function showFundsTransferTab() {\n            var _this3 = this;\n\n            if (!settings.isMetaTraderInternalFundsTransferEnabled()) {\n                return;\n            }\n\n            var accounts = _.filter(this._metatraderLeverage.get('metaTraderAccounts'), function (account) {\n                return _this3.model.hasPlatformAccountId(account) && _this3.model.isTradingAccountStatus(account, ACTIVE);\n            });\n\n            if (_.isEmpty(accounts)) {\n                return;\n            }\n\n            this.$el.find('li[data-tab-id=\"metatrader-funds-transfer\"]').removeClass('hidden');\n        }\n    });\n\n    module.exports = function (options) {\n        return new MetatraderPopupView(_.extend({}, options, {\n            headerStyle: 'default',\n            isHeaderShowed: true,\n            closeIconStyle: 'blue',\n            headerBgStyle: 'transparent'\n        }));\n    };\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\"), __webpack_require__(/*! jquery */ \"./src/vendors/jbone.js\")))\n\n//# sourceURL=webpack:///./src/js/modules/metatrader/metatrader.popup.view.js?");

/***/ }),

/***/ "./src/js/modules/metatrader/tabs/metatrader.accounts.model.js":
/*!*********************************************************************!*\
  !*** ./src/js/modules/metatrader/tabs/metatrader.accounts.model.js ***!
  \*********************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var BaseModel = __webpack_require__(/*! modules/metatrader/base.model */ \"./src/js/modules/metatrader/base.model.js\");\n\n    var _require = __webpack_require__(/*! common.types */ \"./src/js/common.types.js\"),\n        EMPTY = _require.EMPTY;\n\n    module.exports = BaseModel.extend({\n        defaults: function defaults() {\n            return {\n                statusOfMetaTraderAccounts: EMPTY\n            };\n        },\n        initialize: function initialize() {\n            BaseModel.prototype.initialize.apply(this, arguments);\n\n            this.loadMetaTraderAccounts();\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack:///./src/js/modules/metatrader/tabs/metatrader.accounts.model.js?");

/***/ }),

/***/ "./src/js/modules/metatrader/tabs/metatrader.accounts.view.js":
/*!********************************************************************!*\
  !*** ./src/js/modules/metatrader/tabs/metatrader.accounts.view.js ***!
  \********************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_, $) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\n    var View = __webpack_require__(/*! view */ \"./src/js/core/core.view.js\");\n    var LoadingView = __webpack_require__(/*! modules/loading/loading.view */ \"./src/js/modules/loading/loading.view.js\");\n    var MetatraderAccountsModel = __webpack_require__(/*! modules/metatrader/tabs/metatrader.accounts.model */ \"./src/js/modules/metatrader/tabs/metatrader.accounts.model.js\");\n    var $ = __webpack_require__(/*! jquery */ \"./src/vendors/jbone.js\");\n    var core = __webpack_require__(/*! core */ \"./src/js/core.js\");\n    var user = __webpack_require__(/*! modules/user/user.model */ \"./src/js/modules/user/user.model.js\");\n    var numbro = __webpack_require__(/*! utils/numbro */ \"./src/js/utils/numbro.js\");\n    var settings = __webpack_require__(/*! store/settings */ \"./src/js/store/settings.js\");\n\n    var template = _.template(__webpack_require__(/*! ./templates/metatrader.accounts.html */ \"./src/js/modules/metatrader/tabs/templates/metatrader.accounts.html\"));\n\n    var _require = __webpack_require__(/*! common.types */ \"./src/js/common.types.js\"),\n        ACTIVE = _require.ACTIVE,\n        PENDING = _require.PENDING,\n        ERROR = _require.ERROR,\n        SUCCESS = _require.SUCCESS;\n\n    var MTAccountsView = View.extend({\n        className: 'metatrader-accounts',\n\n        events: function events() {\n            return _.extend({}, _.result(View.prototype, 'events'), {\n                'click .fn-show-add-account-tab': 'showAddAccountTab',\n                'click .fn-toggle': 'toggleRow'\n            });\n        },\n\n        initialize: function initialize() {\n            View.prototype.initialize.apply(this, arguments);\n            this.model = new MetatraderAccountsModel();\n\n            this.listenTo(this.model, 'change:statusOfMetaTraderAccounts', this.loadCompleted);\n        },\n        loadCompleted: function loadCompleted() {\n            var statusOfMetaTraderAccounts = this.model.get('statusOfMetaTraderAccounts');\n\n            if (statusOfMetaTraderAccounts === ERROR) {\n                return this.loadError();\n            }\n\n            if (statusOfMetaTraderAccounts !== SUCCESS) {\n                return;\n            }\n\n            this.removeChildView('.metatrader-accounts');\n\n            this.showTemplate();\n        },\n        loadError: function loadError() {\n            this.removeChildView('.metatrader-accounts');\n\n            core.trigger('ui:message-box', {\n                parent: document.body,\n                text: __('server.request.generic.error.body', __('link.contact_us'))\n            });\n        },\n        showTemplate: function showTemplate() {\n            var _this = this;\n\n            var accounts = _.filter(this.model.get('metaTraderAccounts'), function (account) {\n                return _this.model.hasPlatformAccountId(account) && (_this.model.isTradingAccountStatus(account, ACTIVE) || _this.model.isTradingAccountStatus(account, PENDING));\n            });\n            var liquidationLevel = (user.getUserAccountSettingsModel().getLiquidationLevel() * 100).toFixed();\n            var marginAlertLevel2 = (user.getUserAccountSettingsModel().getMarginAlertLevel2() * 100).toFixed();\n            var isBonusesEnabled = this.isBonusesEnabled();\n\n            this.$el.html(template({\n                accounts: accounts,\n                numbro: numbro,\n                liquidationLevel: liquidationLevel,\n                marginAlertLevel2: marginAlertLevel2,\n                isBonusesEnabled: isBonusesEnabled\n            }));\n\n            return this;\n        },\n        render: function render() {\n            View.prototype.render.apply(this, arguments);\n            this.addChildView('.metatrader-accounts', LoadingView, { parent: this.$el, translucent: '2' });\n\n            return this;\n        },\n        showAddAccountTab: function showAddAccountTab() {\n            core.trigger('showMetatraderTabById', 'metatrader-add-account');\n        },\n        toggleRow: function toggleRow(e) {\n            var $button = $(e.target);\n            var row = $button.closest('.row');\n\n            if ($(row).hasClass('expanded')) {\n                $(row).removeClass('expanded');\n                $button.html('+');\n            } else {\n                $(row).addClass('expanded');\n                $button.html('-');\n            }\n\n            var expandableRow = row.nextElementSibling;\n\n            if ($(expandableRow).hasClass('expanded')) {\n                $(expandableRow).removeClass('expanded');\n            } else {\n                $(expandableRow).addClass('expanded');\n            }\n        },\n\n\n        isBonusesEnabled: function isBonusesEnabled() {\n            return settings.isBonusesEnabled();\n        }\n    });\n\n    module.exports = MTAccountsView;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\"), __webpack_require__(/*! jquery */ \"./src/vendors/jbone.js\")))\n\n//# sourceURL=webpack:///./src/js/modules/metatrader/tabs/metatrader.accounts.view.js?");

/***/ }),

/***/ "./src/js/modules/metatrader/tabs/metatrader.add-account.model.js":
/*!************************************************************************!*\
  !*** ./src/js/modules/metatrader/tabs/metatrader.add-account.model.js ***!
  \************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var BaseModel = __webpack_require__(/*! modules/metatrader/base.model */ \"./src/js/modules/metatrader/base.model.js\");\n    var server = __webpack_require__(/*! server */ \"./src/js/modules/server/server.request.js\");\n\n    var _require = __webpack_require__(/*! common.types */ \"./src/js/common.types.js\"),\n        EMPTY = _require.EMPTY,\n        ERROR = _require.ERROR,\n        SUCCESS = _require.SUCCESS,\n        PROCESSING = _require.PROCESSING;\n\n    module.exports = BaseModel.extend({\n        defaults: function defaults() {\n            return {\n                statusOfMetaTraderAccounts: EMPTY,\n                statusOfAddAccount: EMPTY\n            };\n        },\n        initialize: function initialize() {\n            BaseModel.prototype.initialize.apply(this, arguments);\n\n            this.loadMetaTraderAccounts();\n        },\n        addAccount: function addAccount(accountType, platformType, currency, leverage) {\n            var status = this.status('statusOfAddAccount');\n\n            status(PROCESSING);\n\n            if (!accountType || !platformType || !currency || !leverage) {\n                return status(ERROR);\n            }\n\n            server.metaTraderAddAccount({ accountType: accountType, platformType: platformType, currency: currency, leverage: leverage }).then(function (res) {\n                return status(SUCCESS);\n            }).catch(function (err) {\n                console.log(err);\n                status(ERROR);\n            });\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack:///./src/js/modules/metatrader/tabs/metatrader.add-account.model.js?");

/***/ }),

/***/ "./src/js/modules/metatrader/tabs/metatrader.add-account.view.js":
/*!***********************************************************************!*\
  !*** ./src/js/modules/metatrader/tabs/metatrader.add-account.view.js ***!
  \***********************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\n    var View = __webpack_require__(/*! view */ \"./src/js/core/core.view.js\");\n    var LoadingView = __webpack_require__(/*! modules/loading/loading.view */ \"./src/js/modules/loading/loading.view.js\");\n    var wizardElementsTemplates = __webpack_require__(/*! modules/form-wizard/wizard.elements.templates */ \"./src/js/modules/form-wizard/wizard.elements.templates.js\");\n    var WizardStageView = __webpack_require__(/*! modules/form-wizard/wizard.stage.view */ \"./src/js/modules/form-wizard/wizard.stage.view.js\");\n    var WizardStageModel = __webpack_require__(/*! modules/form-wizard/wizard.stage.model */ \"./src/js/modules/form-wizard/wizard.stage.model.js\");\n    var MetatraderAddAccountModel = __webpack_require__(/*! modules/metatrader/tabs/metatrader.add-account.model */ \"./src/js/modules/metatrader/tabs/metatrader.add-account.model.js\");\n    var core = __webpack_require__(/*! core */ \"./src/js/core.js\");\n    var settings = __webpack_require__(/*! store/settings */ \"./src/js/store/settings.js\");\n\n    var template = _.template(__webpack_require__(/*! ./templates/metatrader.add-account.html */ \"./src/js/modules/metatrader/tabs/templates/metatrader.add-account.html\"));\n\n    var _require = __webpack_require__(/*! common.types */ \"./src/js/common.types.js\"),\n        EMPTY = _require.EMPTY,\n        ERROR = _require.ERROR,\n        SUCCESS = _require.SUCCESS,\n        VALIDATE = _require.VALIDATE,\n        PROCESSING = _require.PROCESSING;\n\n    var ONE_LEVERAGE = 1;\n\n    var MTAddAccountView = View.extend({\n        className: 'metatrader-add-account',\n\n        events: function events() {\n            return this.addEvents(View)({\n                'click .fn-add-account': 'addAccount'\n            });\n        },\n        initialize: function initialize(options) {\n            View.prototype.initialize.apply(this, arguments);\n            this.model = new MetatraderAddAccountModel();\n\n            this.listenTo(this.model, 'change:statusOfMetaTraderAccounts', this.loadCompleted);\n            this.listenTo(this.model, 'change:statusOfAddAccount', this.onStatusOfAddAccountChanged);\n        },\n        loadCompleted: function loadCompleted() {\n            var statusOfMetaTraderAccounts = this.model.get('statusOfMetaTraderAccounts');\n\n            if (statusOfMetaTraderAccounts === ERROR) {\n                return this.loadError();\n            }\n\n            if (statusOfMetaTraderAccounts !== SUCCESS) {\n                return;\n            }\n\n            this.removeChildView('.loading-wrapper');\n            this.$el.find('.add-account').removeClass('hidden');\n\n            this.createForm();\n        },\n        loadError: function loadError() {\n            this.removeChildView('.loading-wrapper');\n\n            core.trigger('ui:message-box', {\n                parent: document.body,\n                text: __('server.request.generic.error.body', __('link.contact_us'))\n            });\n        },\n\n\n        createForm: function createForm() {\n            var $parentElement = this.$el.find('.add-account-form');\n            var mtConfig = this.model.get('metaTraderConfiguration');\n            var tradingPlatform = [];\n            var availableCurrencies = [];\n            var accountTypeList = [];\n\n            _.map(mtConfig, function (platform) {\n                tradingPlatform.push(platform.tradePlatformType);\n                availableCurrencies = availableCurrencies.concat(platform.availableCurrencies);\n                accountTypeList = accountTypeList.concat(platform.accountTypeList);\n            });\n\n            availableCurrencies = _.uniq(availableCurrencies);\n            accountTypeList = _.uniq(accountTypeList);\n\n            var formConfig = { form: [[{\n                    disable: false,\n                    template: wizardElementsTemplates.selectBox,\n                    title: __('metatrader.add-account.type.title') + ':',\n                    name: 'field_accountType',\n                    savedData: accountTypeList[0],\n                    options: accountTypeList,\n                    transformOptionText: function transformOptionText(value) {\n                        return __('metatrader.add-account.type.' + value);\n                    },\n                    translationKey: '',\n                    validation: {\n                        rules: {\n                            not_empty: __('errors.required', __('metatrader.add-account.type.title'))\n                        }\n                    }\n                }], [{\n                    disable: false,\n                    template: wizardElementsTemplates.selectBox,\n                    title: __('metatrader.add-account.trading-platform.title') + ':',\n                    name: 'field_tradingPlatform',\n                    savedData: tradingPlatform[0],\n                    options: tradingPlatform,\n                    transformOptionText: function transformOptionText(value) {\n                        return __('metatrader.add-account.trading-platform.' + value);\n                    },\n                    translationKey: '',\n                    validation: {\n                        rules: {\n                            not_empty: __('errors.required', __('metatrader.add-account.trading-platform.title'))\n                        }\n                    }\n                }], [{\n                    disable: false,\n                    template: wizardElementsTemplates.selectBox,\n                    title: __('metatrader.add-account.currency') + ':',\n                    name: 'field_currency',\n                    savedData: availableCurrencies[0],\n                    options: availableCurrencies,\n                    transformOptionText: function transformOptionText(value) {\n                        return value;\n                    },\n                    translationKey: '',\n                    validation: {\n                        rules: {\n                            not_empty: __('errors.required', __('metatrader.add-account.currency'))\n                        }\n                    },\n                    dependent: [{\n                        name: 'field_tradingPlatform',\n                        handler: this.changeCurrenciesOptions.bind(this)\n                    }]\n                }]] };\n\n            this.addLeverageElement(formConfig);\n\n            var model = new WizardStageModel(formConfig);\n\n            this.formView = new WizardStageView({ model: model, $parent: $parentElement });\n\n            this.formView.show();\n        },\n\n        addLeverageElement: function addLeverageElement(formConfig) {\n            var leverages = this.getCurrentLeverages();\n\n            if (leverages.length === ONE_LEVERAGE) {\n                formConfig.form.push([{\n                    title: __('metatrader.add-account.leverage') + ':',\n                    translationKey: '',\n                    template: wizardElementsTemplates.textLabel,\n                    description: '1:' + leverages[0]\n                }]);\n            } else {\n                formConfig.form.push([{\n                    disable: false,\n                    template: wizardElementsTemplates.selectBox,\n                    title: __('metatrader.add-account.leverage') + ':',\n                    name: 'field_leverage',\n                    savedData: leverages[0],\n                    options: leverages,\n                    transformOptionText: function transformOptionText(value) {\n                        return '1:' + value;\n                    },\n                    translationKey: '',\n                    validation: {\n                        rules: {\n                            not_empty: __('errors.required', __('metatrader.add-account.leverage'))\n                        }\n                    }\n                }]);\n            }\n        },\n        getCurrentLeverages: function getCurrentLeverages() {\n            return settings.isMetaTraderInternalLeverageEnabled() ? this.model.get('availableLeverages') : [this.model.get('defaultLeverage')];\n        },\n        render: function render() {\n            View.prototype.render.call(this);\n\n            this.$el.html(template(this.options));\n\n            this.addChildView('.loading-wrapper', LoadingView, { parent: this.$el, translucent: '2' });\n            this.$el.find('.add-account').addClass('hidden');\n\n            return this;\n        },\n        getAccountTypeField: function getAccountTypeField() {\n            return this.formView.form.getField('field_accountType');\n        },\n        getTradingPlatformField: function getTradingPlatformField() {\n            return this.formView.form.getField('field_tradingPlatform');\n        },\n        getCurrencyField: function getCurrencyField() {\n            return this.formView.form.getField('field_currency');\n        },\n        getLeverageField: function getLeverageField() {\n            return this.formView.form.getField('field_leverage');\n        },\n        addAccount: function addAccount() {\n            this.model.set('statusOfAddAccount', VALIDATE);\n        },\n        changeCurrenciesOptions: function changeCurrenciesOptions(field) {\n            var mtConfig = this.model.get('metaTraderConfiguration');\n            var tradingPlatform = void 0;\n\n            _.map(mtConfig, function (platform) {\n                if (platform.tradePlatformType === field.value()) {\n                    tradingPlatform = platform;\n                }\n            });\n\n            this.getCurrencyField().value(tradingPlatform.availableCurrencies[0]);\n            this.showCurrenciesInSelect(tradingPlatform.availableCurrencies);\n        },\n\n\n        showCurrenciesInSelect: function showCurrenciesInSelect(currencies) {\n            var $currencySelect = this.$el.find('[name=\"field_currency\"]');\n\n            $currencySelect.find('.dk-option').addClass('hidden');\n            $currencySelect.find('option').attr('disabled', 'disabled');\n\n            _.map(currencies, function (currency) {\n                $currencySelect.find('[value=\"' + currency + '\"]').removeAttr('disabled');\n                $currencySelect.find('[data-value=\"' + currency + '\"]').removeClass('hidden');\n            });\n        },\n\n        onStatusOfAddAccountChanged: function onStatusOfAddAccountChanged() {\n            var model = this.model;\n            var status = model.get('statusOfAddAccount');\n            var accountType = this.getAccountTypeField().value();\n            var platformType = this.getTradingPlatformField().value();\n            var currency = this.getCurrencyField().value();\n            var availableLeverages = this.getCurrentLeverages();\n            var selectedLeverage = availableLeverages.length === ONE_LEVERAGE ? availableLeverages[0] : this.getLeverageField().value();\n\n            switch (status) {\n                case VALIDATE:\n                    {\n                        model.set('statusOfAddAccount', EMPTY);\n\n                        var hasFormErrors = this.formView.form.validate();\n\n                        if (hasFormErrors) {\n                            return;\n                        }\n\n                        model.addAccount(accountType, platformType, currency, selectedLeverage);\n\n                        return;\n                    }\n\n                case PROCESSING:\n                    this.addChildView('.loading-wrapper', LoadingView, { parent: this.$el, translucent: '2' });\n\n                    return;\n\n                case SUCCESS:\n                    this.removeChildView('.loading-wrapper');\n\n                    core.trigger('showMetatraderTabById', 'metatrader-accounts');\n\n                    return;\n\n                case ERROR:\n                    this.removeChildView('.loading-wrapper');\n                    this.loadError();\n\n                    return;\n            }\n        }\n    });\n\n    module.exports = MTAddAccountView;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\")))\n\n//# sourceURL=webpack:///./src/js/modules/metatrader/tabs/metatrader.add-account.view.js?");

/***/ }),

/***/ "./src/js/modules/metatrader/tabs/metatrader.bonuses.model.js":
/*!********************************************************************!*\
  !*** ./src/js/modules/metatrader/tabs/metatrader.bonuses.model.js ***!
  \********************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var BaseModel = __webpack_require__(/*! modules/metatrader/base.model */ \"./src/js/modules/metatrader/base.model.js\");\n    var InProgressView = __webpack_require__(/*! modules/bonus/bonus-progress/in-progress.view */ \"./src/js/modules/bonus/bonus-progress/in-progress.view.js\");\n    var CompletedView = __webpack_require__(/*! modules/bonus/bonus-progress/completed.view */ \"./src/js/modules/bonus/bonus-progress/completed.view.js\");\n    var InProgressModel = __webpack_require__(/*! modules/bonus/bonus-progress/in-progress.model */ \"./src/js/modules/bonus/bonus-progress/in-progress.model.js\");\n    var CompletedModel = __webpack_require__(/*! modules/bonus/bonus-progress/completed.model */ \"./src/js/modules/bonus/bonus-progress/completed.model.js\");\n    var _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\n\n    var _require = __webpack_require__(/*! common.types */ \"./src/js/common.types.js\"),\n        EMPTY = _require.EMPTY;\n\n    module.exports = BaseModel.extend({\n        defaults: function defaults() {\n            return {\n                tabs: [{\n                    id: 'in-progress',\n                    name: __('bonus.tab.in_progress'),\n                    viewClass: InProgressView,\n                    modelClass: InProgressModel\n                }, {\n                    id: 'completed',\n                    name: __('bonus.tab.completed'),\n                    viewClass: CompletedView,\n                    modelClass: CompletedModel\n                }],\n                currentTabId: 'in-progress',\n                defaultTabId: 'in-progress',\n                selectedAccountId: EMPTY,\n                selectedAccountBonuses: [],\n                statusOfMetaTraderAccountsWithBonuses: EMPTY,\n                metaTraderAccounts: []\n            };\n        },\n        initialize: function initialize() {\n            var _this = this;\n\n            BaseModel.prototype.initialize.apply(this, arguments);\n\n            this.loadMetaTraderAccountsWithBonuses().then(function () {\n                var accountId = _.first(_this.get('metaTraderAccounts')).platformAccountId;\n\n                _this.set('selectedAccountId', accountId);\n                _this.loadMetaTraderBonus(accountId);\n            });\n        },\n        loadMetaTraderBonusesForAccount: function loadMetaTraderBonusesForAccount(accountId) {\n            this.set('selectedAccountId', accountId);\n            this.loadMetaTraderBonus(accountId);\n        },\n        getCurrentTab: function getCurrentTab() {\n            return _.findWhere(this.get('tabs'), { id: this.getCurrentTabId() });\n        },\n        getCurrentTabData: function getCurrentTabData() {\n            var tab = this.getCurrentTab();\n\n            var view = tab.viewClass;\n            var model = tab.modelClass;\n\n            return { view: view, model: model };\n        },\n        getCurrentTabId: function getCurrentTabId() {\n            var currentTabId = this.get('currentTabId');\n\n            return !currentTabId ? this.get('defaultTabId') : currentTabId;\n        },\n        getCurrentTabName: function getCurrentTabName() {\n            return this.getCurrentTab().name;\n        },\n        getBonuses: function getBonuses() {\n            return this.get('selectedAccountBonuses');\n        },\n        setCurrentTabById: function setCurrentTabById(id) {\n            var tab = this.getTabById(id);\n\n            if (tab) {\n                this.set({\n                    currentTabId: tab.id,\n                    currentTabName: tab.name\n                });\n            }\n\n            return tab;\n        },\n        getTabById: function getTabById(id) {\n            return _.findWhere(this.get('tabs'), { id: id });\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\")))\n\n//# sourceURL=webpack:///./src/js/modules/metatrader/tabs/metatrader.bonuses.model.js?");

/***/ }),

/***/ "./src/js/modules/metatrader/tabs/metatrader.bonuses.view.js":
/*!*******************************************************************!*\
  !*** ./src/js/modules/metatrader/tabs/metatrader.bonuses.view.js ***!
  \*******************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_, $) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\n    var View = __webpack_require__(/*! view */ \"./src/js/core/core.view.js\");\n    var LoadingView = __webpack_require__(/*! modules/loading/loading.view */ \"./src/js/modules/loading/loading.view.js\");\n    var MetatraderBonusesModel = __webpack_require__(/*! modules/metatrader/tabs/metatrader.bonuses.model */ \"./src/js/modules/metatrader/tabs/metatrader.bonuses.model.js\");\n    var wizardElementsTemplates = __webpack_require__(/*! modules/form-wizard/wizard.elements.templates */ \"./src/js/modules/form-wizard/wizard.elements.templates.js\");\n    var WizardStageView = __webpack_require__(/*! modules/form-wizard/wizard.stage.view */ \"./src/js/modules/form-wizard/wizard.stage.view.js\");\n    var WizardStageModel = __webpack_require__(/*! modules/form-wizard/wizard.stage.model */ \"./src/js/modules/form-wizard/wizard.stage.model.js\");\n    var $ = __webpack_require__(/*! jquery */ \"./src/vendors/jbone.js\");\n    var core = __webpack_require__(/*! core */ \"./src/js/core.js\");\n\n    var template = _.template(__webpack_require__(/*! ./templates/metatrader.bonuses.html */ \"./src/js/modules/metatrader/tabs/templates/metatrader.bonuses.html\"));\n\n    var _require = __webpack_require__(/*! common.types */ \"./src/js/common.types.js\"),\n        ERROR = _require.ERROR,\n        SUCCESS = _require.SUCCESS;\n\n    var MTBonusesView = View.extend({\n        className: 'metatrader-bonuses',\n\n        events: function events() {\n            return _.extend({}, _.result(View.prototype, 'events'), {\n                'click .fn-tab': 'changeTab'\n            });\n        },\n\n        initialize: function initialize(options) {\n            View.prototype.initialize.apply(this, arguments);\n            this.model = new MetatraderBonusesModel();\n\n            if (!_.isEmpty(options.model.get('bonusesTab'))) {\n                this.model.setCurrentTabById(options.model.get('bonusesTab'));\n            }\n\n            this.listenTo(this.model, 'change:selectedAccountBonusesStatus', this.loadCompleted);\n            this.listenTo(this.model, 'change:currentTabId', this.updateTab);\n            this.listenTo(this, 'form:bonusesForm:change:field_platformAccountId', this.changeAccount);\n        },\n        loadCompleted: function loadCompleted() {\n            var selectedAccountBonusesStatus = this.model.get('selectedAccountBonusesStatus');\n\n            if (selectedAccountBonusesStatus === ERROR) {\n                return this.loadError();\n            }\n\n            if (selectedAccountBonusesStatus !== SUCCESS) {\n                return;\n            }\n\n            this.removeChildView('.metatrader-bonuses');\n\n            this.showTemplate();\n        },\n        loadError: function loadError() {\n            this.removeChildView('.metatrader-bonuses');\n\n            core.trigger('ui:message-box', {\n                parent: document.body,\n                text: __('server.request.generic.error.body', __('link.contact_us'))\n            });\n        },\n        showTemplate: function showTemplate() {\n            var _this = this;\n\n            this.$el.html(template({\n                model: this.model.toJSON()\n            }));\n\n            this.updateTab();\n\n            var $parentElement = this.$el.find('.bonuses-form');\n            var accounts = this.model.get('metaTraderAccounts');\n            var selectedAccount = _.find(accounts, function (account) {\n                return account.platformAccountId === _this.model.get('selectedAccountId');\n            }).platformAccountId;\n\n            var formConfig = { form: [[{\n                    disable: false,\n                    template: wizardElementsTemplates.selectBox,\n                    title: __('metatrader.bonuses.account') + ':',\n                    name: 'field_platformAccountId',\n                    savedData: selectedAccount,\n                    options: accounts,\n                    transformOptionsValue: function transformOptionsValue(value) {\n                        return value.platformAccountId;\n                    },\n                    transformOptionText: function transformOptionText(value) {\n                        var accountId = value.accountId,\n                            tradePlatformType = value.tradePlatformType,\n                            currency = value.currency;\n\n\n                        return tradePlatformType + ' Trader - ' + accountId + ' - ' + String(currency).toUpperCase();\n                    },\n                    translationKey: ''\n                }]] };\n\n            var model = new WizardStageModel(formConfig);\n\n            this.formView = new WizardStageView({ model: model, $parent: $parentElement });\n\n            this.formView.show();\n\n            for (var field in this.formView.form._fields) {\n                var $field = this.formView.form._fields[field];\n\n                this.listenTo($field, 'all', function (eventName, _field, value) {\n                    _this.trigger('form:bonusesForm:' + eventName + ':' + _field._name, _field, value);\n                });\n            }\n\n            return this;\n        },\n        updateTab: function updateTab() {\n            var theModel = this.model;\n            var currentAccountCurrency = __currency(_.find(theModel.get('metaTraderAccounts'), { platformAccountId: theModel.get('selectedAccountId') }).currency);\n\n            var _model$getCurrentTabD = this.model.getCurrentTabData(),\n                view = _model$getCurrentTabD.view,\n                model = _model$getCurrentTabD.model;\n\n            this.addChildView('.tab-content', view, {\n                model: new model({\n                    bonuses: theModel.getBonuses(),\n                    accountCurrency: currentAccountCurrency\n                })\n            });\n\n            this.$('.header-container-xs .caption').html(__(this.model.getCurrentTabName()));\n            this.$('.tab').removeClass('active');\n\n            var tabId = this.model.getCurrentTabId();\n\n            this.$('.tab[data-tab-id=' + tabId + ']').addClass('active');\n        },\n\n\n        changeTab: function changeTab(event) {\n            this.model.setCurrentTabById($(event.currentTarget).attr('data-tab-id'));\n        },\n\n        changeAccount: function changeAccount(event) {\n            var accountId = this.formView.form.getField('field_platformAccountId').value();\n\n            this.model.loadMetaTraderBonusesForAccount(accountId);\n            this.addChildView('.metatrader-bonuses', LoadingView, { parent: this.$el, translucent: '2' });\n        },\n\n        render: function render() {\n            View.prototype.render.apply(this, arguments);\n\n            this.addChildView('.metatrader-bonuses', LoadingView, { parent: this.$el, translucent: '2' });\n\n            return this;\n        }\n    });\n\n    module.exports = MTBonusesView;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\"), __webpack_require__(/*! jquery */ \"./src/vendors/jbone.js\")))\n\n//# sourceURL=webpack:///./src/js/modules/metatrader/tabs/metatrader.bonuses.view.js?");

/***/ }),

/***/ "./src/js/modules/metatrader/tabs/metatrader.deposit.model.js":
/*!********************************************************************!*\
  !*** ./src/js/modules/metatrader/tabs/metatrader.deposit.model.js ***!
  \********************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var BaseModel = __webpack_require__(/*! modules/metatrader/base.model */ \"./src/js/modules/metatrader/base.model.js\");\n    var _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\n    var server = __webpack_require__(/*! server */ \"./src/js/modules/server/server.request.js\");\n    var user = __webpack_require__(/*! modules/user/user.model */ \"./src/js/modules/user/user.model.js\");\n    var settings = __webpack_require__(/*! store/settings */ \"./src/js/store/settings.js\");\n    var getCashierLocale = __webpack_require__(/*! modules/deposit/deposit.locale */ \"./src/js/modules/deposit/deposit.locale.js\").default;\n\n    var _require = __webpack_require__(/*! common.types */ \"./src/js/common.types.js\"),\n        EMPTY = _require.EMPTY,\n        LOADING = _require.LOADING,\n        ERROR = _require.ERROR,\n        SUCCESS = _require.SUCCESS,\n        PAY_GATE = _require.PAY_GATE,\n        SOLID_PAYMENTS = _require.SOLID_PAYMENTS,\n        SAFE_CHARGE = _require.SAFE_CHARGE,\n        PRAXIS = _require.PRAXIS;\n\n    var config = __webpack_require__(/*! config */ \"./src/js/config.js\");\n\n    module.exports = BaseModel.extend({\n        defaults: function defaults() {\n            return {\n                amount: 0,\n                bonusApplied: false,\n                statusOfFrame: EMPTY,\n                statusOfAllAccounts: EMPTY\n            };\n        },\n        initialize: function initialize() {\n            BaseModel.prototype.initialize.apply(this, arguments);\n\n            this.loadAllAccounts();\n            this.loadDepositAmountConfig();\n        },\n        loadFrame: function loadFrame(account) {\n            var status = this.status('statusOfFrame');\n\n            status(LOADING);\n\n            var baseUrl = config.baseUrl;\n            var paymentData = {\n                accountId: account.accountId,\n                amount: this.choseDepositAmount(),\n                country: user.getCountry(),\n                currency: account.currency,\n                locale: getCashierLocale(),\n                bonusApproved: this.isBonusApplied()\n            };\n\n            var vendor = settings.getPaymentsServiceVendor();\n\n            if (vendor === PAY_GATE || vendor === SAFE_CHARGE || vendor === PRAXIS) {\n                paymentData.successUrl = encodeURIComponent(baseUrl + 'deposit.html');\n                paymentData.failUrl = encodeURIComponent(baseUrl + 'deposit_failed.html');\n            }\n\n            if (vendor === SOLID_PAYMENTS) {\n                paymentData.successUrl = encodeURIComponent(baseUrl + ('?path=solid_payments_deposit_sucess&first_deposit=' + this.get('doFirstDeposit') + '&totalAmount=' + this.getAmount() + '&atmAmount=' + this.getAtmAmount() + '&currency=' + user.getUserCurrency()));\n                paymentData.failUrl = encodeURIComponent(baseUrl + '?path=solid_payments_deposit_failed');\n            }\n\n            server.getDepositUrl(paymentData).then(function (res) {\n                status(SUCCESS, { depositHref: res.data });\n            }).catch(function (err) {\n                console.log(err);\n                status(ERROR);\n            });\n        },\n        getAccountById: function getAccountById(accountId) {\n            return _.find(this.get('allAccounts'), function (acc) {\n                return acc.accountId === accountId;\n            });\n        },\n        getAtmAmount: function getAtmAmount() {\n            var amount = this.get('atmAmount');\n\n            if (amount === -1) {\n                return 'Other';\n            }\n\n            if (_.isUndefined(amount)) {\n                return 'N/A';\n            }\n\n            return amount;\n        },\n        isBonusApplied: function isBonusApplied() {\n            return this.get('bonusApplied') === true;\n        },\n\n\n        choseDepositAmount: function choseDepositAmount() {\n            return _.isNaN(this.getAmount()) || this.getAmount() === -1 ? this.getDefaultAmount() : this.getAmount();\n        },\n\n        getAmount: function getAmount() {\n            return this.get('amount');\n        },\n        getAmountConfig: function getAmountConfig() {\n            return this.get('amountConfig');\n        },\n        getDefaultAmount: function getDefaultAmount() {\n            var amountConfig = this.getAmountConfig();\n\n            return amountConfig && amountConfig.defaultAmount;\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\")))\n\n//# sourceURL=webpack:///./src/js/modules/metatrader/tabs/metatrader.deposit.model.js?");

/***/ }),

/***/ "./src/js/modules/metatrader/tabs/metatrader.deposit.view.js":
/*!*******************************************************************!*\
  !*** ./src/js/modules/metatrader/tabs/metatrader.deposit.view.js ***!
  \*******************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_, $) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\n    var View = __webpack_require__(/*! view */ \"./src/js/core/core.view.js\");\n\n    var _require = __webpack_require__(/*! modules/deposit/deposit.popup.view */ \"./src/js/modules/deposit/deposit.popup.view.js\"),\n        DepositPopupView = _require.DepositPopupView;\n\n    var LoadingView = __webpack_require__(/*! modules/loading/loading.view */ \"./src/js/modules/loading/loading.view.js\");\n    var core = __webpack_require__(/*! core */ \"./src/js/core.js\");\n    var MetatraderDepositModel = __webpack_require__(/*! modules/metatrader/tabs/metatrader.deposit.model */ \"./src/js/modules/metatrader/tabs/metatrader.deposit.model.js\");\n    var wizardElementsTemplates = __webpack_require__(/*! modules/form-wizard/wizard.elements.templates */ \"./src/js/modules/form-wizard/wizard.elements.templates.js\");\n    var WizardStageView = __webpack_require__(/*! modules/form-wizard/wizard.stage.view */ \"./src/js/modules/form-wizard/wizard.stage.view.js\");\n    var WizardStageModel = __webpack_require__(/*! modules/form-wizard/wizard.stage.model */ \"./src/js/modules/form-wizard/wizard.stage.model.js\");\n    var user = __webpack_require__(/*! modules/user/user.model */ \"./src/js/modules/user/user.model.js\");\n    var settings = __webpack_require__(/*! store/settings */ \"./src/js/store/settings.js\");\n    var ManualDepositView = __webpack_require__(/*! modules/deposit/deposit.manual.popup.view */ \"./src/js/modules/deposit/deposit.manual.popup.view.js\");\n    var AccountManualDepositModel = __webpack_require__(/*! modules/deposit/account.deposit.manual.popup.model */ \"./src/js/modules/deposit/account.deposit.manual.popup.model.js\");\n    var FirstDepositBonusModel = __webpack_require__(/*! modules/first-deposit-bonus/first.deposit.bonus.model */ \"./src/js/modules/first-deposit-bonus/first.deposit.bonus.model.js\");\n    var FirstDepositBonusView = __webpack_require__(/*! modules/first-deposit-bonus/first.deposit.bonus.view */ \"./src/js/modules/first-deposit-bonus/first.deposit.bonus.view.js\");\n\n    var template = _.template(__webpack_require__(/*! ./templates/metatrader.deposit.html */ \"./src/js/modules/metatrader/tabs/templates/metatrader.deposit.html\"));\n\n    var _require2 = __webpack_require__(/*! common.types */ \"./src/js/common.types.js\"),\n        LIVE_ACCOUNT_ID = _require2.LIVE_ACCOUNT_ID,\n        ERROR = _require2.ERROR,\n        SUCCESS = _require2.SUCCESS,\n        DEPOSIT_STATUSES = _require2.DEPOSIT_STATUSES;\n\n    var MTDepostiView = DepositPopupView.extend({\n        className: 'metatrader-deposit',\n        name: 'metatrader-deposit',\n\n        initialize: function initialize(options) {\n            View.prototype.initialize.apply(this, arguments);\n            this.model = new MetatraderDepositModel();\n\n            this.listenTo(this.model, 'change:statusOfFrame', this.frameLoaded);\n            this.listenTo(this.model, 'change:statusOfAllAccounts', this.loadCompleted);\n            this.listenTo(this.model, 'change:statusOfDepositAmountConfig', this.loadCompleted);\n            this.listenTo(this, 'form:depositForm:change:field_platformAccountId', this.onAccountChanged);\n\n            this.render();\n        },\n        render: function render() {\n            View.prototype.render.call(this);\n\n            this.$el.html(template(this.options));\n\n            this.addChildView('.deposit-popup', LoadingView, { parent: this.$el, translucent: '2' });\n\n            return this;\n        },\n        loadCompleted: function loadCompleted() {\n            var statusOfAllAccounts = this.model.get('statusOfAllAccounts');\n            var statusOfDepositAmountConfig = this.model.get('statusOfDepositAmountConfig');\n\n            if (statusOfAllAccounts === ERROR || statusOfDepositAmountConfig === ERROR) {\n                return this.loadError();\n            }\n\n            if (statusOfAllAccounts !== SUCCESS || statusOfDepositAmountConfig !== SUCCESS) {\n                return;\n            }\n\n            this.createForm();\n        },\n        loadError: function loadError() {\n            this.removeChildView('.deposit-popup');\n\n            core.trigger('ui:message-box', {\n                parent: document.body,\n                text: __('server.request.generic.error.body', __('link.contact_us.funded.client'))\n            });\n        },\n\n\n        createForm: function createForm() {\n            var _this = this;\n\n            var $parentElement = this.$el.find('.deposit-form');\n            var realAccounts = _.filter(this.model.get('allAccounts'), function (account) {\n                return _this.model.hasPlatformAccountId(account) && _this.model.isTradingAccountType(account, LIVE_ACCOUNT_ID);\n            });\n\n            var formConfig = { form: [[{\n                    disable: false,\n                    template: wizardElementsTemplates.selectBox,\n                    title: __('auto.withdrawal.trading_account'),\n                    name: 'field_platformAccountId',\n                    options: realAccounts,\n                    transformOptionsValue: function transformOptionsValue(value) {\n                        return value.accountId;\n                    },\n                    transformOptionText: function transformOptionText(value) {\n                        var accountId = value.accountId,\n                            tradePlatformType = value.tradePlatformType,\n                            currency = value.currency;\n\n\n                        tradePlatformType = tradePlatformType === 'COSMOS' ? __('brand.name') : tradePlatformType;\n\n                        return tradePlatformType + ' Trader - ' + accountId + ' - ' + String(currency).toUpperCase();\n                    },\n                    translationKey: '',\n                    validation: {\n                        rules: {\n                            not_empty: __('errors.required', __('auto.withdrawal.trading_account'))\n                        }\n                    }\n                }]] };\n\n            var model = new WizardStageModel(formConfig);\n\n            this.formView = new WizardStageView({ model: model, $parent: $parentElement });\n\n            this.formView.show();\n\n            for (var field in this.formView.form._fields) {\n                var $field = this.formView.form._fields[field];\n\n                this.listenTo($field, 'all', function (eventName, _field, value) {\n                    _this.trigger('form:depositForm:' + eventName + ':' + _field._name, _field, value);\n                });\n            }\n\n            this.removeChildView('.deposit-popup');\n        },\n\n        showManualDepositPopup: function showManualDepositPopup(account) {\n            var _this2 = this;\n\n            var model = new AccountManualDepositModel(account);\n\n            var manualDepositPopupView = new ManualDepositView({\n                parent: $('body'),\n                source: 'metatrader',\n                model: model,\n                onClose: function onClose() {\n                    manualDepositPopupView = null;\n                    _this2.removeChildView('.deposit-popup');\n                },\n                onSuccess: function onSuccess() {\n                    var accountId = _this2.formView.form.getField('field_platformAccountId').value();\n                    var acc = _this2.model.getAccountById(accountId);\n\n                    manualDepositPopupView = null;\n\n                    _this2.model.set('amount', model.get('amount'));\n                    _this2.model.loadFrame(acc);\n                }\n            });\n        },\n        showFirstDepositBonusPopup: function showFirstDepositBonusPopup(account) {\n            var _this3 = this;\n\n            var model = new FirstDepositBonusModel(account);\n\n            var firstDepositPopupView = new FirstDepositBonusView({\n                parent: $('body'),\n                source: 'metatrader',\n                model: model,\n                onClose: function onClose() {\n                    var accountId = _this3.formView.form.getField('field_platformAccountId').value();\n                    var acc = _this3.model.getAccountById(accountId);\n\n                    firstDepositPopupView = null;\n\n                    if (DEPOSIT_STATUSES.CANCELLED === model.get('status')) {\n                        _this3.removeChildView('.deposit-popup');\n\n                        return;\n                    }\n\n                    _this3.model.set('bonusApplied', model.get('bonusApplied'));\n\n                    if (DEPOSIT_STATUSES.MANUAL_SELECT_AMOUNT === model.get('status')) {\n                        return _this3.showManualDepositPopup(acc);\n                    } else {\n                        _this3.model.set('amount', model.get('selectedAmount'));\n                        _this3.model.loadFrame(acc);\n                    }\n                },\n                isHeaderShowed: true,\n                caption: __('deposit_bonus_table.popup.header')\n            });\n        },\n        onAccountChanged: function onAccountChanged() {\n            var accountId = this.formView.form.getField('field_platformAccountId').value();\n            var account = this.model.getAccountById(accountId);\n\n            this.addChildView('.deposit-popup', LoadingView, { parent: this.$el, translucent: '2' });\n\n            if (this.isFirstDepositBonusEnabled(account.currency)) {\n                this.showFirstDepositBonusPopup(account);\n            } else if (settings.isManualDepositAmountNeeded()) {\n                this.showManualDepositPopup(account);\n            } else {\n                this.model.set('amount', this.model.getDefaultAmount());\n                this.model.loadFrame(account);\n            }\n        },\n        frameLoaded: function frameLoaded() {\n            var model = this.model;\n            var statusOfFrame = model.get('statusOfFrame');\n\n            if (statusOfFrame === ERROR) {\n                return this.loadError();\n            }\n\n            if (statusOfFrame !== SUCCESS) {\n                return;\n            }\n\n            this.removeChildView('.deposit-popup');\n            this.renderFrame(model.get('depositHref'));\n            this.subscribe();\n        },\n\n\n        close: function close() {},\n\n        isFirstDepositBonusEnabled: function isFirstDepositBonusEnabled(currency) {\n            return settings.isBonusesEnabled() && settings.isMtFirstDepositBonusEnabled() && !user.isFirstDeposit() && user.getUserAwardsModel().isFirstDepositExists(currency);\n        }\n    });\n\n    module.exports = MTDepostiView;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\"), __webpack_require__(/*! jquery */ \"./src/vendors/jbone.js\")))\n\n//# sourceURL=webpack:///./src/js/modules/metatrader/tabs/metatrader.deposit.view.js?");

/***/ }),

/***/ "./src/js/modules/metatrader/tabs/metatrader.funds-transfer.model.js":
/*!***************************************************************************!*\
  !*** ./src/js/modules/metatrader/tabs/metatrader.funds-transfer.model.js ***!
  \***************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var BaseModel = __webpack_require__(/*! modules/metatrader/base.model */ \"./src/js/modules/metatrader/base.model.js\");\n    var server = __webpack_require__(/*! server */ \"./src/js/modules/server/server.request.js\");\n\n    var _require = __webpack_require__(/*! common.types */ \"./src/js/common.types.js\"),\n        EMPTY = _require.EMPTY,\n        ERROR = _require.ERROR,\n        SUCCESS = _require.SUCCESS,\n        PROCESSING = _require.PROCESSING;\n\n    module.exports = BaseModel.extend({\n        defaults: function defaults() {\n            return {\n                statusOfAllAccounts: EMPTY,\n                statusOfFundsTransfer: EMPTY\n            };\n        },\n        initialize: function initialize() {\n            BaseModel.prototype.initialize.apply(this, arguments);\n\n            this.loadAllAccounts();\n        },\n        fundsTransfer: function fundsTransfer(accountIdFrom, accountIdTo, amount, currency) {\n            var status = this.status('statusOfFundsTransfer');\n\n            status(PROCESSING);\n\n            if (!accountIdFrom || !accountIdTo || !amount) {\n                return status(ERROR);\n            }\n\n            var data = {\n                from: accountIdFrom,\n                to: accountIdTo,\n                amount: amount,\n                currency: currency\n            };\n\n            server.metaTraderFundsTransfer(data).then(function (res) {\n                return status(SUCCESS);\n            }).catch(function (err) {\n                console.log(err);\n                status(ERROR);\n            });\n        }\n    });\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack:///./src/js/modules/metatrader/tabs/metatrader.funds-transfer.model.js?");

/***/ }),

/***/ "./src/js/modules/metatrader/tabs/metatrader.funds-transfer.view.js":
/*!**************************************************************************!*\
  !*** ./src/js/modules/metatrader/tabs/metatrader.funds-transfer.view.js ***!
  \**************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\n    var View = __webpack_require__(/*! view */ \"./src/js/core/core.view.js\");\n    var LoadingView = __webpack_require__(/*! modules/loading/loading.view */ \"./src/js/modules/loading/loading.view.js\");\n    var core = __webpack_require__(/*! core */ \"./src/js/core.js\");\n    var wizardElementsTemplates = __webpack_require__(/*! modules/form-wizard/wizard.elements.templates */ \"./src/js/modules/form-wizard/wizard.elements.templates.js\");\n    var WizardStageView = __webpack_require__(/*! modules/form-wizard/wizard.stage.view */ \"./src/js/modules/form-wizard/wizard.stage.view.js\");\n    var WizardStageModel = __webpack_require__(/*! modules/form-wizard/wizard.stage.model */ \"./src/js/modules/form-wizard/wizard.stage.model.js\");\n    var MetatraderFundsTransferModel = __webpack_require__(/*! modules/metatrader/tabs/metatrader.funds-transfer.model */ \"./src/js/modules/metatrader/tabs/metatrader.funds-transfer.model.js\");\n\n    var template = _.template(__webpack_require__(/*! ./templates/metatrader.funds-transfer.html */ \"./src/js/modules/metatrader/tabs/templates/metatrader.funds-transfer.html\"));\n\n    var _require = __webpack_require__(/*! common.types */ \"./src/js/common.types.js\"),\n        LIVE_ACCOUNT_ID = _require.LIVE_ACCOUNT_ID,\n        EMPTY = _require.EMPTY,\n        ERROR = _require.ERROR,\n        SUCCESS = _require.SUCCESS,\n        VALIDATE = _require.VALIDATE,\n        PROCESSING = _require.PROCESSING;\n\n    var MTFundsTransferView = View.extend({\n        className: 'metatrader-funds-transfer',\n\n        events: function events() {\n            return this.addEvents(View)({\n                'click .fn-funds-transfer': 'fundsTranfer'\n            });\n        },\n        initialize: function initialize(options) {\n            View.prototype.initialize.apply(this, arguments);\n            this.model = new MetatraderFundsTransferModel();\n\n            this.listenTo(this.model, 'change:statusOfAllAccounts', this.loadCompleted);\n            this.listenTo(this.model, 'change:statusOfFundsTransfer', this.onStatusOfFundsTransferChanged);\n        },\n        loadCompleted: function loadCompleted() {\n            var statusOfAllAccounts = this.model.get('statusOfAllAccounts');\n\n            if (statusOfAllAccounts === ERROR) {\n                return this.loadError();\n            }\n\n            if (statusOfAllAccounts !== SUCCESS) {\n                return;\n            }\n\n            this.removeChildView('.loading-wrapper');\n            this.$el.find('.funds-transfer').removeClass('hidden');\n\n            this.createForm();\n        },\n        loadError: function loadError() {\n            this.removeChildView('.loading-wrapper');\n\n            core.trigger('ui:message-box', {\n                parent: document.body,\n                text: __('server.request.generic.error.body', __('link.contact_us.funded.client'))\n            });\n        },\n\n\n        createForm: function createForm() {\n            var _this = this;\n\n            var $parentElement = this.$el.find('.funds-transfer-form');\n            var realAccounts = _.filter(this.model.get('allAccounts'), function (account) {\n                return _this.model.hasPlatformAccountId(account) && _this.model.isTradingAccountType(account, LIVE_ACCOUNT_ID);\n            });\n            var formConfig = { form: [[{\n                    disable: false,\n                    template: wizardElementsTemplates.inputAddon,\n                    title: __('metatrader.funds-transfer.amount') + ':',\n                    name: 'field_amount',\n                    addonText: '$',\n                    type: 'text',\n                    translationKey: '',\n                    validation: {\n                        filters: ['trim', 'number'],\n                        rules: {\n                            min: [1, __('errors.required', __('metatrader.funds-transfer.amount'))],\n                            not_empty: __('errors.required', __('metatrader.funds-transfer.amount'))\n                        }\n                    },\n                    dependent: [{\n                        name: 'field_platformAccountIdFrom',\n                        handler: this.changeInputAddonText.bind(this)\n                    }]\n                }], [{\n                    disable: false,\n                    template: wizardElementsTemplates.selectBox,\n                    title: __('metatrader.funds-transfer.origin-account') + ':',\n                    name: 'field_platformAccountIdFrom',\n                    savedData: _.first(realAccounts).accountId,\n                    options: realAccounts,\n                    transformOptionsValue: function transformOptionsValue(value) {\n                        return value.accountId;\n                    },\n                    transformOptionText: function transformOptionText(value) {\n                        var accountId = value.accountId,\n                            tradePlatformType = value.tradePlatformType,\n                            currency = value.currency;\n\n\n                        tradePlatformType = tradePlatformType === 'COSMOS' ? __('brand.name') : tradePlatformType;\n\n                        return tradePlatformType + ' Trader - ' + accountId + ' - ' + String(currency).toUpperCase();\n                    },\n                    translationKey: '',\n                    validation: {\n                        rules: {\n                            not_empty: __('errors.required', __('metatrader.funds-transfer.origin-account'))\n                        }\n                    },\n                    dependent: [{\n                        name: 'field_platformAccountIdTo',\n                        handler: this.removeAccountFromSelect\n                    }]\n                }], [{\n                    disable: false,\n                    template: wizardElementsTemplates.selectBox,\n                    title: __('metatrader.funds-transfer.destination-account') + ':',\n                    name: 'field_platformAccountIdTo',\n                    options: realAccounts,\n                    transformOptionsValue: function transformOptionsValue(value) {\n                        return value.accountId;\n                    },\n                    transformOptionText: function transformOptionText(value) {\n                        var accountId = value.accountId,\n                            tradePlatformType = value.tradePlatformType,\n                            currency = value.currency;\n\n\n                        tradePlatformType = tradePlatformType === 'COSMOS' ? __('brand.name') : tradePlatformType;\n\n                        return tradePlatformType + ' Trader - ' + accountId + ' - ' + String(currency).toUpperCase();\n                    },\n                    translationKey: '',\n                    validation: {\n                        rules: {\n                            not_empty: __('errors.required', __('metatrader.funds-transfer.destination-account'))\n                        }\n                    },\n                    dependent: [{\n                        name: 'field_platformAccountIdFrom',\n                        handler: this.removeAccountFromSelect\n                    }]\n                }]] };\n\n            var model = new WizardStageModel(formConfig);\n\n            this.formView = new WizardStageView({ model: model, $parent: $parentElement });\n\n            this.formView.show();\n\n            this.formView.form.$('.field-type-input-addon > .field-status').html(__('metatrader.funds-transfer.amount.info'));\n        },\n\n        removeAccountFromSelect: function removeAccountFromSelect(field) {\n            this.$el.find('[disabled=\"disabled\"]').removeAttr('disabled');\n            this.$el.find('.hidden').removeClass('hidden');\n\n            var accountId = field.value();\n\n            this.$el.find('[value=\"' + accountId + '\"]').attr('disabled', 'disabled');\n            this.$el.find('[data-value=\"' + accountId + '\"]').addClass('hidden');\n        },\n\n        changeInputAddonText: function changeInputAddonText(field) {\n            var accounts = this.model.get('allAccounts');\n            var account = _.find(accounts, function (acc) {\n                return acc.accountId === field.value();\n            });\n            var $amountAddonText = this.getAmountField().$el.find('.field-addonText');\n\n            $amountAddonText.html(__currency(account.currency));\n        },\n\n        getAllAccountsIds: function getAllAccountsIds() {\n            return _.pluck(this.model.get('allAccounts'), 'accountId');\n        },\n        render: function render() {\n            View.prototype.render.call(this);\n\n            this.$el.html(template(this.options));\n\n            this.addChildView('.loading-wrapper', LoadingView, { parent: this.$el, translucent: '2' });\n            this.$el.find('.funds-transfer').addClass('hidden');\n\n            return this;\n        },\n        getAccountIdFromField: function getAccountIdFromField() {\n            return this.formView.form.getField('field_platformAccountIdFrom');\n        },\n        getAccountIdToField: function getAccountIdToField() {\n            return this.formView.form.getField('field_platformAccountIdTo');\n        },\n        getAmountField: function getAmountField() {\n            return this.formView.form.getField('field_amount');\n        },\n        fundsTranfer: function fundsTranfer() {\n            this.model.set('statusOfFundsTransfer', VALIDATE);\n        },\n        onStatusOfFundsTransferChanged: function onStatusOfFundsTransferChanged() {\n            var model = this.model;\n            var status = model.get('statusOfFundsTransfer');\n            var from = this.getAccountIdFromField().value();\n            var to = this.getAccountIdToField().value();\n            var amount = this.getAmountField().value();\n\n            switch (status) {\n                case VALIDATE:\n                    {\n                        model.set('statusOfFundsTransfer', EMPTY);\n\n                        var hasFormErrors = this.formView.form.validate();\n\n                        if (hasFormErrors) {\n                            return;\n                        }\n\n                        var accounts = this.model.get('allAccounts');\n                        var accountFrom = _.find(accounts, function (acc) {\n                            return acc.accountId === from;\n                        });\n                        var currency = accountFrom.currency;\n\n                        model.fundsTransfer(+from, +to, +amount, currency);\n\n                        return;\n                    }\n\n                case PROCESSING:\n                    this.addChildView('.loading-wrapper', LoadingView, { parent: this.$el, translucent: '2' });\n\n                    return;\n\n                case SUCCESS:\n                    this.removeChildView('.loading-wrapper');\n                    this.getAmountField().value('');\n\n                    this.getAccountIdToField().fieldVerified();\n                    this.getAccountIdToField().setTooltipMessage(__('metatrader.funds-transfer.success'));\n\n                    return;\n                case ERROR:\n                    this.removeChildView('.loading-wrapper');\n                    this.loadError();\n\n                    return;\n            }\n        }\n    });\n\n    module.exports = MTFundsTransferView;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\")))\n\n//# sourceURL=webpack:///./src/js/modules/metatrader/tabs/metatrader.funds-transfer.view.js?");

/***/ }),

/***/ "./src/js/modules/metatrader/tabs/metatrader.leverage.view.js":
/*!********************************************************************!*\
  !*** ./src/js/modules/metatrader/tabs/metatrader.leverage.view.js ***!
  \********************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(_) {var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, module) {\n    var _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\n    var View = __webpack_require__(/*! view */ \"./src/js/core/core.view.js\");\n    var LoadingView = __webpack_require__(/*! modules/loading/loading.view */ \"./src/js/modules/loading/loading.view.js\");\n    var core = __webpack_require__(/*! core */ \"./src/js/core.js\");\n    var wizardElementsTemplates = __webpack_require__(/*! modules/form-wizard/wizard.elements.templates */ \"./src/js/modules/form-wizard/wizard.elements.templates.js\");\n    var WizardStageView = __webpack_require__(/*! modules/form-wizard/wizard.stage.view */ \"./src/js/modules/form-wizard/wizard.stage.view.js\");\n    var WizardStageModel = __webpack_require__(/*! modules/form-wizard/wizard.stage.model */ \"./src/js/modules/form-wizard/wizard.stage.model.js\");\n    var MetatraderLeverageModel = __webpack_require__(/*! modules/metatrader/tabs/metatrader.leverage.model */ \"./src/js/modules/metatrader/tabs/metatrader.leverage.model.js\");\n\n    var template = _.template(__webpack_require__(/*! ./templates/metatrader.leverage.html */ \"./src/js/modules/metatrader/tabs/templates/metatrader.leverage.html\"));\n\n    var _require = __webpack_require__(/*! common.types */ \"./src/js/common.types.js\"),\n        ACTIVE = _require.ACTIVE,\n        EMPTY = _require.EMPTY,\n        ERROR = _require.ERROR,\n        SUCCESS = _require.SUCCESS,\n        VALIDATE = _require.VALIDATE,\n        PROCESSING = _require.PROCESSING;\n\n    var MTLeverageView = View.extend({\n        className: 'metatrader-leverage',\n\n        events: function events() {\n            return this.addEvents(View)({\n                'click .fn-leverage-change': 'changeLeverage'\n            });\n        },\n        initialize: function initialize(options) {\n            View.prototype.initialize.apply(this, arguments);\n            this.model = new MetatraderLeverageModel();\n\n            this.listenTo(this.model, 'change:statusOfMetaTraderAccounts', this.loadCompleted);\n            this.listenTo(this.model, 'change:statusOfLeverageChange', this.onStatusOfLeverageChanged);\n        },\n        loadCompleted: function loadCompleted() {\n            var statusOfMetaTraderAccounts = this.model.get('statusOfMetaTraderAccounts');\n\n            if (statusOfMetaTraderAccounts === ERROR) {\n                return this.loadError();\n            }\n\n            if (statusOfMetaTraderAccounts !== SUCCESS) {\n                return;\n            }\n\n            this.removeChildView('.loading-wrapper');\n            this.$el.find('.meta-leverage').removeClass('hidden');\n\n            this.createForm();\n        },\n        loadError: function loadError() {\n            this.removeChildView('.loading-wrapper');\n\n            core.trigger('ui:message-box', {\n                parent: document.body,\n                text: __('server.request.generic.error.body', __('link.contact_us'))\n            });\n        },\n\n\n        createForm: function createForm() {\n            var _this = this;\n\n            var $parentElement = this.$el.find('.metatrader-leverage-form');\n            var activeAccounts = _.filter(this.model.get('metaTraderAccounts'), function (account) {\n                return _this.model.hasPlatformAccountId(account) && _this.model.isTradingAccountStatus(account, ACTIVE);\n            });\n            var formConfig = { form: [[{\n                    disable: false,\n                    template: wizardElementsTemplates.selectBox,\n                    title: __('metatrader.leverage.account') + ':',\n                    name: 'field_platformAccountId',\n                    savedData: _.first(activeAccounts).accountId,\n                    options: activeAccounts,\n                    transformOptionsValue: function transformOptionsValue(value) {\n                        return value.accountId;\n                    },\n                    transformOptionText: function transformOptionText(value) {\n                        var accountId = value.accountId,\n                            tradePlatformType = value.tradePlatformType,\n                            currency = value.currency;\n\n\n                        tradePlatformType = tradePlatformType === 'COSMOS' ? __('brand.name') : tradePlatformType;\n\n                        return tradePlatformType + ' Trader - ' + accountId + ' - ' + String(currency).toUpperCase();\n                    },\n                    translationKey: '',\n                    validation: {\n                        rules: {\n                            not_empty: __('errors.required', __('metatrader.leverage.account'))\n                        }\n                    }\n                }], [{\n                    disable: true,\n                    template: wizardElementsTemplates.inputBox,\n                    title: __('metatrader.leverage.current-leverage') + ':',\n                    name: 'field_currentLeverage',\n                    translationKey: '',\n                    validation: {\n                        rules: {\n                            not_empty: __('errors.required', __('metatrader.leverage.current-leverage'))\n                        }\n                    },\n                    dependent: [{\n                        name: 'field_platformAccountId',\n                        handler: this.setLeverageByAccountId.bind(this)\n                    }]\n                }, {\n                    disable: false,\n                    template: wizardElementsTemplates.selectBox,\n                    title: __('metatrader.leverage.new-leverage') + ':',\n                    name: 'field_newLeverage',\n                    savedData: '1:' + _.first(this.model.get('availableLeverages')),\n                    options: this.model.get('availableLeverages'),\n                    transformOptionText: function transformOptionText(value) {\n                        return '1:' + value;\n                    },\n                    translationKey: '',\n                    validation: {\n                        rules: {\n                            not_empty: __('errors.required', __('metatrader.leverage.new-leverage'))\n                        }\n                    },\n                    dependent: [{\n                        name: 'field_platformAccountId',\n                        handler: this.setLeverageOptionsByAccountId.bind(this)\n                    }]\n                }]] };\n\n            var model = new WizardStageModel(formConfig);\n\n            this.formView = new WizardStageView({ model: model, $parent: $parentElement });\n\n            this.formView.show();\n        },\n\n        setLeverageByAccountId: function setLeverageByAccountId(field) {\n            var accounts = this.model.get('metaTraderAccounts');\n            var account = _.find(accounts, function (acc) {\n                return acc.accountId === field.value();\n            });\n            var currentLeverageField = this.getCurrentLeverageField();\n\n            currentLeverageField.setValue('1:' + account.leverage);\n        },\n\n        setLeverageOptionsByAccountId: function setLeverageOptionsByAccountId(field) {\n            var _this2 = this;\n\n            var availableLeverages = this.model.get('availableLeverages');\n            var accounts = this.model.get('metaTraderAccounts');\n            var account = _.find(accounts, function (acc) {\n                return acc.accountId === field.value();\n            });\n            var newLeverageField = this.getNewLeverageField();\n\n            availableLeverages.forEach(function (leverage) {\n                _this2.$el.find('[value=\"' + leverage + '\"]').removeAttr('disabled');\n                _this2.$el.find('[data-value=\"' + leverage + '\"]').removeClass('hidden');\n            });\n\n            this.$el.find('[value=\"' + account.leverage + '\"]').attr('disabled', 'disabled');\n            this.$el.find('[data-value=\"' + account.leverage + '\"]').addClass('hidden');\n        },\n\n        getAllAccountsIds: function getAllAccountsIds() {\n            return _.pluck(this.model.get('allAccounts'), 'tpId');\n        },\n        render: function render() {\n            View.prototype.render.call(this);\n\n            this.$el.html(template(this.options));\n\n            this.addChildView('.loading-wrapper', LoadingView, { parent: this.$el, translucent: '2' });\n            this.$el.find('.meta-leverage').addClass('hidden');\n\n            return this;\n        },\n        getAccountIdField: function getAccountIdField() {\n            return this.formView.form.getField('field_platformAccountId');\n        },\n        getCurrentLeverageField: function getCurrentLeverageField() {\n            return this.formView.form.getField('field_currentLeverage');\n        },\n        getNewLeverageField: function getNewLeverageField() {\n            return this.formView.form.getField('field_newLeverage');\n        },\n        changeLeverage: function changeLeverage() {\n            this.model.set('statusOfLeverageChange', VALIDATE);\n        },\n        onStatusOfLeverageChanged: function onStatusOfLeverageChanged() {\n            var model = this.model;\n            var status = model.get('statusOfLeverageChange');\n            var accountId = +this.getAccountIdField().value();\n            var newLeverage = +this.getNewLeverageField().value();\n\n            switch (status) {\n                case VALIDATE:\n                    {\n                        model.set('statusOfLeverageChange', EMPTY);\n\n                        var hasFormErrors = this.formView.form.validate();\n\n                        if (hasFormErrors) {\n                            return;\n                        }\n\n                        model.changeLeverage(accountId, newLeverage);\n\n                        return;\n                    }\n\n                case PROCESSING:\n                    this.addChildView('.loading-wrapper', LoadingView, { parent: this.$el, translucent: '2' });\n\n                    return;\n                case SUCCESS:\n                    this.removeChildView('.loading-wrapper');\n                    this.getNewLeverageField().value('');\n                    this.getAccountIdField().fieldVerified();\n                    this.getAccountIdField().setTooltipMessage(__('metatrader.leverage.success'));\n\n                    return;\n                case ERROR:\n                    this.removeChildView('.loading-wrapper');\n\n                    return;\n            }\n        }\n    });\n\n    module.exports = MTLeverageView;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\")))\n\n//# sourceURL=webpack:///./src/js/modules/metatrader/tabs/metatrader.leverage.view.js?");

/***/ }),

/***/ "./src/js/modules/metatrader/tabs/templates/metatrader.accounts.html":
/*!***************************************************************************!*\
  !*** ./src/js/modules/metatrader/tabs/templates/metatrader.accounts.html ***!
  \***************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports) {

eval("module.exports = \"<table>\\n    <thead class=\\\"columns\\\">\\n        <tr>\\n            <th class=\\\"column column-account\\\"><%=__('metatrader.accounts.account')%></th>\\n            <th class=\\\"column column-status\\\"><%=__('metatrader.accounts.status')%></th>\\n            <th class=\\\"column column-action hidden-xs\\\">\\n                <button class=\\\"btn btn-default btn-mobile-bottom fn-show-add-account-tab\\\"> <span class=\\\"icon-circle\\\">+</span><%=__('metatrader.accounts.actions.add-account')%></button>\\n            </th>\\n        </tr>\\n    </thead>\\n    <tbody class=\\\"rows\\\">\\n        <% _.each(accounts, function(account) { %>\\n            <tr class=\\\"row\\\">\\n                <td class=\\\"row-accounts\\\">\\n                    <span class=\\\"icon-square fn-toggle \\\">+</span>\\n                    <%- account.tradePlatformType %> - <%- account.accountId %> - <%- account.currency %>\\n                </td>\\n                <td class=\\\"row-status\\\"><%=__('metatrader.accounts.status.' + account.tradingAccountStatus)%> - <%=__('metatrader.accounts.type.' + account.tradingAccountType)%></td>\\n                <td class=\\\"metatrader-accounts-actions actions hidden-xs\\\">\\n                    <% if(account.webLink) { %>\\n                        <a class=\\\"btn btn-icon\\\" href=\\\"<%- account.webLink %>\\\" target=\\\"_blank\\\" title=\\\"<%=__('metatrader.accounts.sirix')%>\\\"><i class=\\\"icon icon-launch-sirix-blue\\\"></i></a>\\n                    <% } %>\\n                    <% if(account.downloadLink) { %>\\n                        <a class=\\\"btn btn-icon\\\" href=\\\"<%- account.downloadLink %>\\\" target=\\\"_blank\\\" title=\\\"<%=__('metatrader.accounts.download.' + account.tradePlatformType)%>\\\"><i class=\\\"icon icon-download-blue\\\"></i></a>\\n                    <% } %>\\n                    <% if(account.accountStatementLink) { %>\\n                        <a class=\\\"btn btn-icon\\\" href=\\\"<%- account.accountStatementLink %>\\\" target=\\\"_blank\\\" title=\\\"<%=__('metatrader.accounts.account-statement')%>\\\"><i class=\\\"icon icon-report-blue\\\"></i></a>\\n                    <% } %>\\n                </td>\\n            </tr>\\n            <tr class=\\\"row expandable-content\\\">\\n                <td class=\\\"info-column-left\\\">\\n                    <div class=\\\"info-row\\\">\\n                        <div class=\\\"info-row-left\\\">\\n                            <span class=\\\"icon icon-help\\\" aria-label=\\\"<%=__('help.account.balance')%>\\\"></span>\\n                            <%=__('metatrader.accounts.balance')%>\\n                        </div>\\n                        <div><%- numbro(account.balance).formatForeignCurrency(__currency(account.currency)) %></div>\\n                    </div>\\n                    <div class=\\\"info-row\\\">\\n                        <div class=\\\"info-row-left\\\">\\n                            <span class=\\\"icon icon-help\\\" aria-label=\\\"<%=__('help.account.equity')%>\\\"></span>\\n                            <%=__('metatrader.accounts.equity')%>\\n                        </div>\\n                        <div><%- numbro(account.equity).formatForeignCurrency(__currency(account.currency)) %></div>\\n                    </div>\\n                    <div class=\\\"info-row\\\">\\n                        <div class=\\\"info-row-left\\\">\\n                            <span class=\\\"icon icon-help\\\" aria-label=\\\"<%=__('help.account.free_margin')%>\\\"></span>\\n                            <%=__('metatrader.accounts.free-margin')%>\\n                        </div>\\n                        <div><%- numbro(account.freeMargin).formatForeignCurrency(__currency(account.currency)) %></div>\\n                    </div>\\n                    <div class=\\\"info-row\\\">\\n                        <div class=\\\"info-row-left\\\">\\n                            <span class=\\\"icon icon-help\\\" aria-label=\\\"<%=__('help.account.login')%>\\\"></span>\\n                            <%=__('indigo.new_account.login_link')%>\\n                        </div>\\n                        <div><%- account.platformAccountId %></div>\\n                    </div>\\n                </td>\\n                <td class=\\\"info-column-right\\\">\\n                    <div class=\\\"info-row\\\">\\n                        <div class=\\\"info-row-left\\\">\\n                            <span class=\\\"icon icon-help\\\" aria-label=\\\"<%=__('help.account.used_margin')%>\\\"></span>\\n                            <%=__('metatrader.accounts.used-margin')%>\\n                        </div>\\n                        <div><%- numbro(account.usedMargin).formatForeignCurrency(__currency(account.currency)) %></div>\\n                    </div>\\n                    <div class=\\\"info-row\\\">\\n                        <div class=\\\"info-row-left\\\">\\n                            <span class=\\\"icon icon-help\\\" aria-label=\\\"<%=__('help.account.margin_level',marginAlertLevel2,liquidationLevel)%>\\\"></span>\\n                            <%=__('metatrader.accounts.margin-level')%>\\n\\n                        </div>\\n                        <div>\\n                            <% if (account.marginLevel) {%>\\n                                <%=account.marginLevel%>%\\n                            <% } else { %>\\n                                N/A\\n                            <% } %>\\n                        </div>\\n                    </div>\\n                    <% if (isBonusesEnabled && account.hasCashBonuses) { %>\\n                        <div class=\\\"info-row\\\">\\n                            <div class=\\\"info-row-left\\\">\\n                                <span class=\\\"icon icon-help\\\" aria-label=\\\"<%=__('funds.management.bonuses.help')%>\\\"></span>\\n                                <%=__('metatrader.accounts.bonuses')%>\\n                            </div>\\n                            <div><%- numbro(account.accountBonusesAmount).formatForeignCurrency(__currency(account.currency)) %></div>\\n                        </div>\\n                    <% } %>\\n                    <div class=\\\"info-row\\\">\\n                        <div class=\\\"info-row-left\\\">\\n                            <span class=\\\"icon icon-help\\\" aria-label=\\\"<%=__('funds.management.available.help')%>\\\"></span>\\n                            <%=__('metatrader.accounts.available-withdrawal')%>\\n                        </div>\\n                        <div><%- numbro(account.availableForWithdrawal).formatForeignCurrency(__currency(account.currency)) %></div>\\n                    </div>\\n                </td>\\n            </tr>\\n        <% }) %>\\n    </tbody>\\n</table>\\n<button class=\\\"btn btn-primary btn-mobile-bottom fn-show-add-account-tab hidden-sm hidden-md hidden-lg\\\"> <span class=\\\"icon-circle\\\">+</span><%=__('metatrader.accounts.actions.add-account')%></button>\\n\";\n\n//# sourceURL=webpack:///./src/js/modules/metatrader/tabs/templates/metatrader.accounts.html?");

/***/ }),

/***/ "./src/js/modules/metatrader/tabs/templates/metatrader.add-account.html":
/*!******************************************************************************!*\
  !*** ./src/js/modules/metatrader/tabs/templates/metatrader.add-account.html ***!
  \******************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"add-account\\\">\\n    <div class=\\\"add-account-title\\\"><%=__('metatrader.add-account.title')%></div>\\n    <div class=\\\"add-account-form\\\"></div>\\n</div>\\n<div class=\\\"form-col btn-col\\\">\\n    <button class=\\\"btn btn-primary btn-mobile-bottom btn-block fn-add-account\\\"><%- __('actions.create') %></button>\\n</div>\\n<div class=\\\"loading-wrapper\\\"></div>\\n\";\n\n//# sourceURL=webpack:///./src/js/modules/metatrader/tabs/templates/metatrader.add-account.html?");

/***/ }),

/***/ "./src/js/modules/metatrader/tabs/templates/metatrader.bonuses.html":
/*!**************************************************************************!*\
  !*** ./src/js/modules/metatrader/tabs/templates/metatrader.bonuses.html ***!
  \**************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"bonuses\\\">\\n    <div class=\\\"bonuses-form\\\"></div>\\n    <div class=\\\"visible-xs header-container-xs\\\">\\n        <div class=\\\"left flex fn-close-popup flex-valign-center btn\\\">\\n            <div class=\\\"icon arrow\\\"></div>\\n            <b><%-__('actions.back') %></b>\\n        </div>\\n        <div class=\\\"caption flex flex-valign-center flex-align-center\\\">\\n            <%-model.currentTabName || model.currentTabNameMobile%>\\n        </div>\\n        <div class=\\\"right flex flex-valign-center btn\\\"></div>\\n    </div>\\n\\n    <div class=\\\"bonus-progress-content\\\">\\n        <div class=\\\"modal-dialog-container\\\"></div>\\n\\n        <div class=\\\"bonuses_tabs flex flex-row flex-align-start hidden-xs\\\">\\n            <% _.each(model.tabs, function(v) { %>\\n            <div class=\\\"tab fn-tab flex flex-stretch flex-valign-center active <%- model.currentTabId == v.id ? 'active' : '' %>\\\" data-tab-id=\\\"<%- v.id %>\\\"><%- v.name %></div>\\n            <% }) %>\\n        </div>\\n\\n        <div class=\\\"tab-content\\\"></div>\\n    </div>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./src/js/modules/metatrader/tabs/templates/metatrader.bonuses.html?");

/***/ }),

/***/ "./src/js/modules/metatrader/tabs/templates/metatrader.deposit.html":
/*!**************************************************************************!*\
  !*** ./src/js/modules/metatrader/tabs/templates/metatrader.deposit.html ***!
  \**************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"deposit-popup\\\">\\n    <div class=\\\"deposit-form\\\"></div>\\n    <form id=\\\"deposit-frame-form\\\" target=\\\"deposit-frame\\\"  method=\\\"POST\\\"></form>\\n    <iframe id=\\\"deposit-frame\\\" name=\\\"deposit-frame\\\" style=\\\"visibility: hidden\\\"></iframe>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./src/js/modules/metatrader/tabs/templates/metatrader.deposit.html?");

/***/ }),

/***/ "./src/js/modules/metatrader/tabs/templates/metatrader.funds-transfer.html":
/*!*********************************************************************************!*\
  !*** ./src/js/modules/metatrader/tabs/templates/metatrader.funds-transfer.html ***!
  \*********************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"funds-transfer\\\">\\n    <div class=\\\"funds-transfer-info\\\"><%=__('metatrader.funds-transfer.info')%></div>\\n    <div class=\\\"funds-transfer-form\\\"></div>\\n</div>\\n<div class=\\\"form-col\\\">\\n    <button class=\\\"btn btn-primary btn-mobile-bottom btn-block fn-funds-transfer\\\"><%- __('actions.submit') %></button>\\n</div>\\n<div class=\\\"loading-wrapper\\\"></div>\";\n\n//# sourceURL=webpack:///./src/js/modules/metatrader/tabs/templates/metatrader.funds-transfer.html?");

/***/ }),

/***/ "./src/js/modules/metatrader/tabs/templates/metatrader.leverage.html":
/*!***************************************************************************!*\
  !*** ./src/js/modules/metatrader/tabs/templates/metatrader.leverage.html ***!
  \***************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"meta-leverage\\\">\\n    <div class=\\\"metatrader-leverage-info\\\"><%=__('metatrader.leverage.info.select')%></div>\\n    <div class=\\\"metatrader-leverage-info\\\"><%=__('metatrader.leverage.info.period')%></div>\\n    <div class=\\\"metatrader-leverage-info\\\"><%=__('metatrader.leverage.info.position-closed')%></div>\\n    <div class=\\\"metatrader-leverage-form\\\"></div>\\n    <div class=\\\"form-col\\\">\\n        <button class=\\\"btn btn-primary btn-mobile-bottom btn-block fn-leverage-change\\\"><%- __('actions.submit') %></button>\\n    </div>\\n\\n    <ul class=\\\"metatrader-leverage-list\\\">\\n        <li><%=__('metatrader.leverage.info.profile')%></li>\\n        <li><%=__('metatrader.leverage.info.policy')%></li>\\n    </ul>\\n</div>\\n<div class=\\\"loading-wrapper\\\"></div>\";\n\n//# sourceURL=webpack:///./src/js/modules/metatrader/tabs/templates/metatrader.leverage.html?");

/***/ }),

/***/ "./src/js/modules/metatrader/templates/metatrader.popup.html":
/*!*******************************************************************!*\
  !*** ./src/js/modules/metatrader/templates/metatrader.popup.html ***!
  \*******************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"metatrader-popup\\\">\\n    <div class=\\\"modal-dialog-container\\\"></div>\\n    <div class=\\\"metatrader-body flex-stretch\\\">\\n        <div class=\\\"tabs hidden-xs\\\">\\n            <ul>\\n                <% _.each(tabs, function(tab) { %>\\n                <li class=\\\"tab fn-tab <%- currentTabId == tab.id ? 'active' : '' %> tab-<%= tab.id%> <%- tab.hidden ? 'hidden' : '' %>\\\"\\n                    data-tab-id=\\\"<%- tab.id %>\\\">\\n                    <a><%- __(tab.title) %></a>\\n                </li>\\n                <% }) %>\\n                <% if (tradingCentral) { %>\\n                <li class=\\\"tab\\\">\\n                    <a href=\\\"<%= tradingCentral %>\\\" target=\\\"_blank\\\"><%= __('metatrader.technical-analysis.title') %></a>\\n                </li>\\n                <% } %>\\n                <% if (isConditionsTabEnabled) { %>\\n                <li class=\\\"tab\\\">\\n                    <%= __('metatrader.trading-conditions.title') %>\\n                </li>\\n                <% } %>\\n                <% if (isMT5PlatformEnabled) { %>\\n                <li class=\\\"tab\\\">\\n                    <%= __('metatrader.mt5-platform.title') %>\\n                </li>\\n                <% } %>\\n                <% if (resetPassword) { %>\\n                <li class=\\\"tab fn-reset-password\\\">\\n                    <a><%= __('metatrader.reset-password.title') %></a>\\n                </li>\\n                <% } %>\\n            </ul>\\n        </div>\\n        <div class=\\\"tab-content\\\"></div>\\n    </div>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./src/js/modules/metatrader/templates/metatrader.popup.html?");

/***/ })

}]);